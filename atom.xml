<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[joakimbech.com]]></title>
  <link href="http://jyx.github.io/atom.xml" rel="self"/>
  <link href="http://jyx.github.io/"/>
  <updated>2015-03-14T15:53:58+01:00</updated>
  <id>http://jyx.github.io/</id>
  <author>
    <name><![CDATA[Joakim Bech]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AEG TS 250 K - Table Saw Review]]></title>
    <link href="http://jyx.github.io/blog/2015/03/11/aeg-ts-250-k-table-saw/"/>
    <updated>2015-03-11T20:47:16+01:00</updated>
    <id>http://jyx.github.io/blog/2015/03/11/aeg-ts-250-k-table-saw</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://jyx.github.io/images/ts250k/ts_logo.jpg">
Last year we built a workshop/shed/depot. Since I planned to build a lot of
stuff (in wood) I decided to buy a table saw. My criteria was that it should be
portable and rather easy to put aside when not in use. I&rsquo;m new to woodworking so
I didn&rsquo;t have any experience and therefore it was a bit hard to know exactly
what to look for when buying a table saw. After looking around a little bit my
choice fell on the table saw from AEG called <a href="http://www.aeg-powertools.eu/woodworking/ts-250-k/ts-250-k/">AEG TS 250 K</a>.
This was a chance I took, since I couldn&rsquo;t really find any good review for this
table saw on the net. The table saw itself comes with foldable stand, a 254mm
saw blade which is capable of cutting 90mm in 90 degree cuts and 62 mm at 45
degree cuts. It has soft start and the fence looked quite good. So on paper this
seems like a quite good table &hellip; and it is, but there are some quirks.</p>

<!-- more -->


<p>The last couple of months I&rsquo;ve read an endless amount of woodworking pages on
the net and I&rsquo;ve also watched a substantial amount of woodworking clips on
YouTube (as a father of four year old twins, I have quite a few hours to spare
during night time for activities like this). So by now I think I have a pretty
good understanding of cross cut sleds, router fences, drill press tables,
cyclone dust collectors etc, you name it! Quite early on I realized that a cross
cut sled would be quite useful. With a cross cut sled you can get very accurate
90 degree cuts, you can easily incorporate stop blocks etc and due to this I
could most likely also put my miter saw somewhere so it doesn&rsquo;t occupy my
valuable space in the workshop.  Ideally I&rsquo;d like to have all tools ready to be
used, but I simply don&rsquo;t have that much space. Anyhow, cross cut sled is a key
thing to make.</p>

<h3>Ingredients for a cross cut sled</h3>

<ul>
<li>12-18mm thick plywood, MDF or something similar that is hard enough to use for
the sled base.</li>
<li>Sled runners made from hardwood (oak, maple, beech etc).</li>
<li>And some straight pieces of wood for the front and back fence.</li>
<li>Preferable a routed slot for mounting a t-slot on the back fence.</li>
</ul>


<p>In principle that&rsquo;s it, sounds simple? It is quite simple, or I should say, it
<em>should</em> be quite simple.</p>

<h3>Cutting the sled base</h3>

<p>Since it&rsquo;s a bit messy in the workshop right now and my plywood sheet was full
size (2450x1200mm) I had to use another saw, my track saw, that is a cheap copy
of <a href="http://www.festoolusa.com/power-tools/track-saws/ts-55-req-plunge-cut-track-saw-561556">Festools&#8217; TS 55 REQ Track Saw</a>.
It did a good job, so here I didn&rsquo;t really use the AEG table saw. In any case
even if you have the space to handle a full sheet of plywood I think it&rsquo;s pretty
hard to maneuver such a big piece on a table saw that small.</p>

<h3>Cutting the sled runners</h3>

<p>The sled runners are the strips of hardwood (preferable) that you put in the
slots in the table saw base. I.e, these are the ones that guides the sled base
when moving it back and forth when cutting your wood pieces.</p>

<h4>Problem 1 &ndash; no standard miter slots!</h4>

<p>The miter gauge slots on AES TS 250 K are no standard slots! They are almost
19mm wide, but only 6mm deep. What makes this even worse is that the slots
themselves are not really squared. In the bottom, in the middle of the slot,
there is a stripe that is very thin, but still big enough that it makes the slot
non-flat. I guess the intention is to take care of the tiny dust that falls into
the slots that in some cases prevents miter gauges etc so slide easily.</p>

<p><img src="http://jyx.github.io/images/ts250k/ts_mitre_slots.jpg"></p>

<p>Also at the top, the last 1-2mm of the slot are rounded, which effectively means
that you only have straight side &ldquo;walls&rdquo; in the slot that are about 4mm. So, you
don&rsquo;t have much material in the slot when you want to tighten sled runners. On
top of this bad design choice, AEG decided to make three tabs, which I call
&ldquo;inverted t-slots&rdquo; see the image above and below and you will understand what
I&rsquo;m talking about.</p>

<p><img src="http://jyx.github.io/images/ts250k/ts_mitre_slot_closeup.jpg"></p>

<p>The idea behind this genius design is to support the included miter gauge, which
by the way is a piece of crap. There is at least 1mm play when using the
included miter gauge in the slots, which means that it is totally impossible to
get accurate cuts using this gauge regardless how you try to adjust it. The
height of the inverted t-slots are roughly 2-3mm, which leads to you only have
3-4mm between them and the bottom of the miter slot.</p>

<p><img src="http://jyx.github.io/images/ts250k/ts_mitre_gauge_gap.jpg">
<img src="http://jyx.github.io/images/ts250k/ts_mitre_gauge_gap2.jpg"></p>

<p>Anyhow, I have also been able to make a quite good router table with a router
fence and micro adjustment capabilities for my router, which means that in
theory, I should be able to route 1mm wide and 3mm deep slots on the side of my
sled runners. But first I needed to do a rough cut of my oak piece that I
intended to use as sled runners in my miter slots.</p>

<h4>Problem 2 &ndash; sloppy, non flat table saw insert</h4>

<p>The <a href="https://www.google.se/#q=table+saw+insert">insert</a> is made out of thin
plastic and seems quite fragile. Also it&rsquo;s made so you should be able to do 45
degree cuts without having the blade nudging the insert. This is good &hellip; and
bad. It&rsquo;s bad because you cannot cut thin strips, since if you try to do this,
they will simply fall down into the table saw in this rather big hole.  Another
thing with this insert that it&rsquo;s not dead flat with the top of the table saw,
which means that thin pieces could tilt a little bit and as an end result you
will get non squared cuts.</p>

<p><img class="left" src="http://jyx.github.io/images/ts250k/ts_default_insert.jpg" width="360" height="240">
<img class="right" src="http://jyx.github.io/images/ts250k/ts_insert_bad_height.jpg" width="360" height="240">
<img src="http://jyx.github.io/images/ts250k/ts_zero_insert.jpg"></p>

<p>As seen in the image above, my solution to this problem was to simply create a
new zero play insert made out of plywood instead. It took an hour or so to make
it fit and get the correct height. When that was done I could go back working
on my oak sled runners.</p>

<h4>Problem 3 &ndash; hard to make straight cuts using the fence</h4>

<p>I still haven&rsquo;t been able to figure out why I cannot make complete straight
cuts. I think it&rsquo;s because of a couple of different reasons. First reason is
probably because I&rsquo;m a beginner, secondly it seems like the table saw fence have
some play before tightening it and lastly I&rsquo;m pretty sure that the blade isn&rsquo;t
square to either the slots and/or the fence, more on that later.</p>

<p>Anyhow, I managed to get the strips to a fairly good size and I also managed to
route the tiny &ldquo;slots&rdquo; for the inverted t-slots. So far so good.
<img src="http://jyx.github.io/images/ts250k/ts_oak_runners.jpg"></p>

<h3>Mounting the sled runners on the sled base</h3>

<p>This is pretty straight forward, put the runners in the slots, put the sled base
on top of them and the table saw table. Use some screws and/or glue to put them
together. I did that and after doing so I noticed that I barely could move my
sled. So, what was wrong? After some investigation I realized that my sled
runners was a bit too thick in some areas of the slots. So after some fine
tuning and moving the sled back and forth it started to move a little smoother
(but still not as good as I wanted it to be).</p>

<p>Side note: Later on when creating another sled I realized that the stupid
inverted t-slots are not the same size. Some of them are bigger than others.
After some sanding on the inverted t-slots, directly on the aluminium (both the
height and the width), to make them more equal, things are suddenly running even
more smoothly now.</p>

<h4>Problem 4 &ndash; saw blade and slots are not parallel</h4>

<p>The rest of the cross cut sled build was pretty straight forward, just &ldquo;Google&rdquo;
&ldquo;how to make a cross cut sled&rdquo; and you will find several guides of how to do it.
I did walk the extra mile and were using the <a href="https://youtu.be/UbG-n--LFgQ">5 cut method</a>
to get the back fence of the sled (almost) perfectly perpendicular to the cut.
Note that I&rsquo;m saying &ldquo;the cut&rdquo;, because the cut is not perpendicular to the
table saw blade (see image below). My take is that the table saw slots are not
parallel with the table saw blade. I doesn&rsquo;t really matter when using a cross
cut sled, it&rsquo;s just that the cut will be a little bit wider than the kerf of the
saw blade. However I would prefer having the sleds parallel.</p>

<p><img class="right" src="http://jyx.github.io/images/ts250k/ts_blade_unaligned.jpg"></p>

<h3>Other things that a potential buyer has to be aware of</h3>

<h4>The Table Top</h4>

<p>The top of the table is made out of aluminium and the surface is a little bit
rough. It&rsquo;s not a big problem, but you have to be aware of that you cannot use
magnetic tools like the ones used together with a dial indicator. I also don&rsquo;t
think it&rsquo;s very common to have an iron surface on portable table top saws.</p>

<h4>The Riving knife</h4>

<p><img class="right" src="http://jyx.github.io/images/ts250k/ts_riving_height.jpg" width="399" height="266"></p>

<p>The riving knife is quite big and follows the saw blade when you raise and lower
your saw blade. That is really good. The downside is that the riving knife also
goes above the saw blade which means that you cannot cut grooves/slots when
having the riving knife mounted. You <em>cannot</em> adjust this. Either the riving
knife is mounted or it has to be removed. Since I&rsquo;m really concerned about
safety when it comes to using my table saw, my plan is to cut the riving knife
so it stays just below the height of the saw blade (see the image above).
However by doing so I cannot mount the dust collector / kickback protection
again. This is not a big deal for me, since that is to big and bulky anyway and
having a riving knife is the critical thing to have mounted to prevent kickback.</p>

<p>The riving knife doesn&rsquo;t come with any quick mount. To remove it you need to
first remove the insert and then you need to unscrew the two hex bolts that
tightens the riving knife. It would be nice if it had the same type of quick
mount that you can find on other table saws.</p>

<p><img src="http://jyx.github.io/images/ts250k/ts_riving_mount.jpg"></p>

<h4>AEG support</h4>

<p>Since I planned to modify my riving knife I wanted to ask AEG if and where I
could buy another riving knife, so that I could have one modified riving knife
and one that is as when I bought the saw. I think I&rsquo;ve tried to contact them 2
or 3 times using the &ldquo;Contact US&rdquo; link on table saw page. However without
success, I haven&rsquo;t seen any response at all. This is bad AEG!</p>

<h3>Summary</h3>

<h4>Pros</h4>

<ul>
<li>Rather cheap table saw, I bought it when they had some kind of campaign and
without shipping it costed, I think 3995:&ndash; SEK which is roughly USD $460 with
todays exchange rate. Normally it&rsquo;s a little bit more expensive.</li>
<li>Well built. It feels sturdy.</li>
<li>Quite good cutting depth, 90mm for straight cuts and 62mm for 45 degree cuts
is quite good.</li>
<li>Integrated table side extension up to 645 mm.</li>
<li>Makes quite clean cuts.</li>
<li>Soft start: Nice to have even though not necessary.</li>
<li>Foldable stand which is very easy to use.</li>
</ul>


<h4>Cons</h4>

<ul>
<li>Hard to make perfect straight cuts using the fence.</li>
<li>The miter gauge slots in the table is a joke. Why the heck didn&rsquo;t they go for
standard &frac34;&#8221; (wide) x 3/8&#8221; (deep) miter gauge slots?</li>
<li>The included miter gauge is just crap.</li>
<li>Riving knife is too high.</li>
<li>No quick mount/release of the riving knife. It&rsquo;s mounted using normal
hex-bolts.</li>
<li>The insert is not so well made and this is also a non-standard format, which
means that you cannot buy standards inserts, which you otherwise easily can
buy from eBay or woodworking shops.</li>
<li>AEG support doesn&rsquo;t answer when using the &ldquo;<a href="http://www.aeg-powertools.eu/header/contact-us/">Contact US</a>&rdquo; page on their site.</li>
</ul>


<h3>Is it worth buying?</h3>

<p>If you&rsquo;re a beginner and plan to mainly use it to rip wood and doesn&rsquo;t care too
much about accuracy, then I think this is a good table saw. However, if you are
more into accuracy and care about micrometer instead of millimeter and if you
plan to use various tools attached to the slots, then I&rsquo;d not recommend you to
buy this table saw. It&rsquo;s simply too much hassle to create and or modify existing
runners to make them usable. For me it is working know after the tweaks I&rsquo;ve
done. But if I would have known what I know now I would have looked for another
table saw instead, like <a href="http://www.bosch-professional.com/gb/en/gts-10-xc-26179-ocs-p/">GTS 10 XC Professional</a>,
<a href="http://www.amazon.com/DEWALT-DW744XRS-10-inch-Table-Rolling/dp/B0014GD3HQ">Dewalt DW744XRS</a> or <a href="http://www.amazon.com/DEWALT-DW745-10-Inch-Job-Site-Capacity/dp/B000HXT2N6">DEWALT DW745</a>.</p>

<p>I hope this review was useful, in case you have questions, please use the
comment field below and I&rsquo;ll try to answer your questions.</p>

<p>// Joakim</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fetchmail and GnuPG]]></title>
    <link href="http://jyx.github.io/blog/2014/11/01/fetchmail-and-gnupg/"/>
    <updated>2014-11-01T23:02:03+01:00</updated>
    <id>http://jyx.github.io/blog/2014/11/01/fetchmail-and-gnupg</id>
    <content type="html"><![CDATA[<p>When using <a href="http://en.wikipedia.org/wiki/Internet_Message_Access_Protocol">imap</a>
in <a href="http://en.wikipedia.org/wiki/Mutt_(email_client)">mutt</a> you have the
possibility to use gpg to decrypt your password instead of having it as
plaintext in your configuration file (.muttrc), see
<a href="https://wiki.archlinux.org/index.php/Mutt#Passwords_management">ArchWiki</a> how
to do that.</p>

<p>However, if you consider using POP3, then you will also need to install and
enable <a href="http://msmtp.sourceforge.net">msmtp</a> (not strictly needed),
<a href="http://www.fetchmail.info">fetchmail</a> and
<a href="http://www.procmail.org">procmail</a>. Ubuntu have created a quite nice
<a href="https://help.ubuntu.com/community/MuttAndGmail">guide</a> of
the steps involved.</p>

<!-- more -->


<p>Just as mutt also msmtp have the possibility to use gpg in runtime instead of
having the password stored in plaintext. The way to do that in msmtp is to put a
line mention gpg in your $HOME/.msmtprc file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>passwordeval    <span class="s2">&quot;gpg --quiet --for-your-eyes-only --no-tty --decrypt ~/.msmtp-gmail.gpg&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, fetchmail doesn&rsquo;t have the same option. So, mutt and msmtp is fine, but
you still have to put your password in a cleartext file when configuring
fetchmail. Clearly there must be a better way to handle this? I downloaded the
source code
(<a href="http://sourceforge.net/projects/fetchmail/files/branch_6.3/fetchmail-6.3.26.tar.xz/download">fetchmail-6.3.26</a>)
and did a quick and dirty hack. I just modified the main function in the file
fetchmail.c, so that instead of having to provide the password on commandline
(when password isn&rsquo;t set in $HOME/.fetchmailrc) it makes use of gpg similar to how
both mutt and msmtp does. It isn&rsquo;t pretty &hellip; but it works (tested on Arch Linux
on a Raspberry PI). To try it out, use the same gpg encrypted file as you use
for msmtp, i.e, $HOME/msmtp-gmail.gpg and patch fetchmail using this patch and
rebuild.</p>

<p>+<figure class='code'><figcaption><span>fetchmail patch  (fetchmail_gpg.patch)</span> <a href='http://jyx.github.io/downloads/code/patch/fetchmail_gpg.patch'>download</a></figcaption></p>

<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gh">diff --git a/fetchmail.c b/fetchmail.c</span>
</span><span class='line'><span class="gh">index ae30f90..6462dfe 100644</span>
</span><span class='line'><span class="gd">--- a/fetchmail.c</span>
</span><span class='line'><span class="gi">+++ b/fetchmail.c</span>
</span><span class='line'><span class="gu">@@ -573,6 +573,28 @@ int main(int argc, char **argv)</span>
</span><span class='line'>          ctl-&gt;remotename, ctl-&gt;server.pollname);
</span><span class='line'>      return(PS_AUTHFAIL);
</span><span class='line'>      } else {
</span><span class='line'><span class="gi">+#define ENABLE_GPG_PASSWORD</span>
</span><span class='line'><span class="gi">+#ifdef ENABLE_GPG_PASSWORD</span>
</span><span class='line'><span class="gi">+        FILE *f;</span>
</span><span class='line'><span class="gi">+        f = popen(&quot;/usr/bin/gpg -dq $HOME/.msmtp-gmail.gpg&quot;, &quot;r&quot;);</span>
</span><span class='line'><span class="gi">+        if (f)</span>
</span><span class='line'><span class="gi">+        {</span>
</span><span class='line'><span class="gi">+            tmpbuf = (char *)xmalloc(64);</span>
</span><span class='line'><span class="gi">+            memset(tmpbuf, 0, 64);</span>
</span><span class='line'><span class="gi">+            fgets(tmpbuf, 64, f);</span>
</span><span class='line'><span class="gi">+            pclose(f);</span>
</span><span class='line'><span class="gi">+</span>
</span><span class='line'><span class="gi">+            /* Remove the newline character. */</span>
</span><span class='line'><span class="gi">+            tmpbuf[strlen(tmpbuf)-1] = &#39;\0&#39;;</span>
</span><span class='line'><span class="gi">+            ctl-&gt;password = xstrdup(tmpbuf);</span>
</span><span class='line'><span class="gi">+            /* fprintf(stdout, &quot;pw: %s : %d\n&quot;, ctl-&gt;password, strlen(ctl-&gt;password)); */</span>
</span><span class='line'><span class="gi">+            free(tmpbuf);</span>
</span><span class='line'><span class="gi">+        }</span>
</span><span class='line'><span class="gi">+        else</span>
</span><span class='line'><span class="gi">+        {</span>
</span><span class='line'><span class="gi">+            fprintf(stderr, &quot;No encrypted file at $HOME/.msmtp-gmail.gpg&quot;);</span>
</span><span class='line'><span class="gi">+        }</span>
</span><span class='line'><span class="gi">+#else</span>
</span><span class='line'>      const char* password_prompt = GT_(&quot;Enter password for %s@%s: &quot;);
</span><span class='line'>      size_t pplen = strlen(password_prompt) + strlen(ctl-&gt;remotename) + strlen(ctl-&gt;server.pollname) + 1;
</span><span class='line'>
</span><span class='line'><span class="gu">@@ -580,7 +602,9 @@ int main(int argc, char **argv)</span>
</span><span class='line'>      snprintf(tmpbuf, pplen, password_prompt,
</span><span class='line'>          ctl-&gt;remotename, ctl-&gt;server.pollname);
</span><span class='line'>      ctl-&gt;password = xstrdup((char *)fm_getpassword(tmpbuf));
</span><span class='line'><span class="gi">+        fprintf(stdout, &quot;pw: %s : %d\n&quot;, ctl-&gt;password, strlen(ctl-&gt;password));</span>
</span><span class='line'>      free(tmpbuf);
</span><span class='line'><span class="gi">+#endif</span>
</span><span class='line'>      }
</span><span class='line'>  }
</span><span class='line'>     }
</span></code></pre></td></tr></table></div>


<p></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Timing Attack - Proof of Concept]]></title>
    <link href="http://jyx.github.io/blog/2014/02/02/timing-attack-proof-of-concept/"/>
    <updated>2014-02-02T10:38:37+01:00</updated>
    <id>http://jyx.github.io/blog/2014/02/02/timing-attack-proof-of-concept</id>
    <content type="html"><![CDATA[<p>You might have heard about timing attacks, but either thought it sounded
too complicated to understand or that it is too complicated to actually do such
an attack. In this post I&rsquo;m going to give a brief overview of a timing attack
and also provide some example code that you can play with on your own. Hopefully
after reading this post you will understand that you cannot neglect this if you
are creating a system where security is needed.</p>

<!-- more -->


<h3>What is a timing attack</h3>

<p>A <a href="http://en.wikipedia.org/wiki/Timing_attack">timing attack</a> is a so called
<a href="http://en.wikipedia.org/wiki/Side_channel_attack">side channel attack</a>
where you analyze the timing information on a system is such a way that it
allows to break the protection of the system or a program running on it.</p>

<h3>How is a timing attack done?</h3>

<p>Typically you need to measure the amount of time needed to do operations of some
kind. You can do this in several ways, for example you could hook up a set of
probes on a chip or a PCB and watch the result on an oscilloscope or a logical
analyzer. Another option is to simply leverage features from the
CPU/architecture itself. On a normal PC running Intel (or AMD) you can use the
time stamp counter <a href="http://en.wikipedia.org/wiki/Time_Stamp_Counter">rdtsc</a>
or a High Precision Event Timer
<a href="http://en.wikipedia.org/wiki/High_Precision_Event_Timer">hpet</a>. Be aware that
the time stamp counter isn&rsquo;t reliable any longer, since process speeds can
change (due to power management), you have context switches etc. But just for
testing it can be good enough.</p>

<p>So you have found a way of taking time measures, what next? The easy answer is,
start measure the execution time of sensitive functions. For example when
calling functions that verifies password, functions that does encryption and
such. Measuring the time needed for strcmp as exemplified in the proof of
concept code below is easy. It becomes more complicated if you want to do the
same when doing
<a href="http://en.wikipedia.org/wiki/Advanced_Encryption_Standard#Side-channel_attacks">AES</a>
encryption for example. It is still doable, but you also need to know the
algorithm to know where to look and how to interpretate the leaked information.</p>

<h3>Countermeasures</h3>

<p>TBD, but the main idea is that you need balance the string compare functions so
that it always takes the same amount of time to perform.</p>

<h3>Proof of concept</h3>

<p>I have created a small proof of concept / testing program to show that it is
actually not that complicated to do a timing attack. It is unlikely that it is
as easy as this, but still, it gives the idea and shows that you can actually
use timing to guess password, guesses that are fairly good. The main idea is to
show how execution time actually varies when doing string comparison. The by
using this information leakage we show that we can guess pretty good what we
believe the correct character is in the correct password/string.</p>

<h4>The algorithm</h4>

<ol>
<li>Loop over all characters, one by one in the string that we want to check
(&ldquo;thisisalongstring&rdquo; in this case).</li>
<li>For every character in the string, do an inner loop, where you are looping
from &lsquo;a&rsquo; to &lsquo;z&rsquo;. For every call to the string comparison function record the
amount of time it took. The letter that had longest execution time is most
likely the correct character. Hence save that character in the in the array
that contains guessed character.</li>
<li>Lastly compare the correct string with guessed string to see if we got all
timing based guesses correct or not.</li>
</ol>


<h4>Results</h4>

<p>Here are the test result of a test run with debug information enabled</p>

<pre><code>make DEBUG=1 &amp;&amp; ./main 10
</code></pre>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>./main 10
</span><span class='line'>Shows a couple of examples of the <span class="nb">time </span>it takes to make string comparison
</span><span class='line'>avg <span class="nb">time </span>long string <span class="o">(</span>thisisalongstring<span class="o">)</span>: 821
</span><span class='line'>avg <span class="nb">time </span>short string <span class="o">(</span>foo<span class="o">)</span>: 532
</span><span class='line'>avg <span class="nb">time </span>0 char correct <span class="o">(</span>XXX/foo<span class="o">)</span>: 486
</span><span class='line'>avg <span class="nb">time </span>1 char correct <span class="o">(</span>fXX/foo<span class="o">)</span>: 495
</span><span class='line'>avg <span class="nb">time </span>2 char correct <span class="o">(</span>foX/foo<span class="o">)</span>: 540
</span><span class='line'>avg <span class="nb">time </span>3 char correct <span class="o">(</span>foo/foo<span class="o">)</span>: 561
</span><span class='line'>Guessed that pw should be: thisisalongshring
</span><span class='line'>Guessed that pw should be: thisisalongstring
</span><span class='line'>Guessed that pw should be: thisisalongstring
</span><span class='line'>Guessed that pw should be: thhbisalongstring
</span><span class='line'>Guessed that pw should be: thisisalongstring
</span><span class='line'>Guessed that pw should be: thisisalongstring
</span><span class='line'>Guessed that pw should be: thisisalongstring
</span><span class='line'>Guessed that pw should be: thisisalongstring
</span><span class='line'>Guessed that pw should be: thisimalongstrimf
</span><span class='line'>Guessed that pw should be: thisisalongstrhng
</span><span class='line'>6 successful timing attacks
</span></code></pre></td></tr></table></div></figure>


<p>The figures will vary, but they are almost always in the same region. Looking
at:</p>

<p><strong>Line 3</strong>: we can see that it takes 821 time units for a full and correct string
compare of the string &ldquo;thisisalongstring&rdquo;.</p>

<p><strong>Line 4</strong>: we can see that it takes 532 time units to correctly match the string
&ldquo;foo&rdquo;.</p>

<p><strong>Line 5-8</strong>: for every trail, we add a correct matching character and as expected
we can see that the time increases for every correct character. This is because
the string compare function as said before has a timing linear to the correct
number of characters.</p>

<p><strong>Line 9-19</strong>: shows the result when trying to guess the string
&ldquo;thisisalongstring&rdquo; based on the time it takes to guess a, b, c, &hellip; z, for
every character. This particular run we guessed correct 6 out or 10 times.
Not that bad, it takes roughly 0.002 seconds to run everything above. According
to Steve Gibson&rsquo;s <a href="https://www.grc.com/haystack.htm">Password Haystack</a> page, it
takes approximately 3.75 centuries to brute force that password <strong>once</strong> using a
what he calls a &ldquo;massive cracking array scenario (assuming one hundred trillion
guesses per second)&rdquo;.</p>

<h4>A couple of interesting things I&rsquo;ve noticed</h4>

<ul>
<li>If I increase the TEST_LOOPS define I actually get much worse result?</li>
<li>If I turn on all optimizations, i.e. -O3, it doesn&rsquo;t work at all.</li>
<li>The last character was always incorrectly guessed and that is the reason why
I&rsquo;ve added a space at the end of the string &ldquo;thisisalongstring &rdquo;, which I
later on strip away. I believe the reason for this problem is inaccuray using
rdtsc.</li>
</ul>


<p>If any reader of this post knows the answer to my reflections above, please
leave a comment.</p>

<h4>Source code</h4>

<figure class='code'><figcaption><span> (time_attack_strcmp.c)</span> <a href='http://jyx.github.io/downloads/code/timing/time_attack_strcmp.c'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Time attack proof of concept / tutorial.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Author: Joakim Bech &lt;joakim.bech@gmail.com&gt;</span>
</span><span class='line'><span class="cm"> * Date: 2014-02-02</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="cp">#include &lt;stdbool.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdint.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define TEST_LOOPS 1</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef DEBUG</span>
</span><span class='line'><span class="cp">#define dprintf printf</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'><span class="cp">#define dprintf</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * strcmp taken from from glibc 2.13, just for reference.</span>
</span><span class='line'><span class="cm"> * Compare S1 and S2, returning less than, equal to or</span>
</span><span class='line'><span class="cm"> * greater than zero if S1 is lexicographically less than,</span>
</span><span class='line'><span class="cm"> *  equal to or greater than S2.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="n">strcmp2</span><span class="p">(</span><span class="n">p1</span><span class="p">,</span> <span class="n">p2</span><span class="p">)</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">p1</span><span class="p">;</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">p2</span><span class="p">;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s1</span> <span class="o">=</span> <span class="p">(</span><span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="n">p1</span><span class="p">;</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s2</span> <span class="o">=</span> <span class="p">(</span><span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="n">p2</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">c1</span><span class="p">,</span> <span class="n">c2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">do</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">c1</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="p">)</span> <span class="o">*</span><span class="n">s1</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="n">c2</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="p">)</span> <span class="o">*</span><span class="n">s2</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">c1</span> <span class="o">==</span> <span class="sc">&#39;\0&#39;</span><span class="p">)</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">c1</span> <span class="o">-</span> <span class="n">c2</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">c1</span> <span class="o">==</span> <span class="n">c2</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">c1</span> <span class="o">-</span> <span class="n">c2</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Change &quot;strcmp2&quot; to some other comparing function that you want to test.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">static</span> <span class="n">bool</span> <span class="n">compare_strings</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span> <span class="n">str1</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">str2</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">strcmp2</span><span class="p">(</span><span class="n">str1</span><span class="p">,</span> <span class="n">str2</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * A wrapper for the cpu instruction rdtsc, which stores the current cycle</span>
</span><span class='line'><span class="cm"> * number as a 64 bit number. The cpuid instruction is included because it</span>
</span><span class='line'><span class="cm"> * forces inorder execution. (See the 1997 Intel document on using rdtsc for</span>
</span><span class='line'><span class="cm"> * performance testing cited in the bibliography).</span>
</span><span class='line'><span class="cm"> * Grabbed from password.c by Dan Halperin (which also is a time attack proof</span>
</span><span class='line'><span class="cm"> * of concept).</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Be aware that rdtsc isn&#39;t reliable on a multicore system and power management</span>
</span><span class='line'><span class="cm"> * features have also made it even more inaccurate. However it works quite good</span>
</span><span class='line'><span class="cm"> * for the purpose of this demonstration.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">static</span> <span class="kr">inline</span> <span class="kt">uint64_t</span> <span class="n">read_rdtsc</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">uint64_t</span> <span class="n">d</span><span class="p">;</span>
</span><span class='line'>  <span class="n">__asm__</span> <span class="nf">__volatile__</span> <span class="p">(</span><span class="s">&quot;cpuid </span><span class="se">\n</span><span class="s"> rdtsc&quot;</span> <span class="o">:</span> <span class="s">&quot;=A&quot;</span> <span class="p">(</span><span class="n">d</span><span class="p">));</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">d</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Function that calculates the average time it takes to make TEST_LOOPS string</span>
</span><span class='line'><span class="cm"> * comparisons.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">static</span> <span class="kt">uint64_t</span> <span class="n">do_stat</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">pw_ref</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">test_pw</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">test_str</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">uint64_t</span> <span class="n">time_long</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">uint64_t</span> <span class="n">start</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">uint64_t</span> <span class="n">end</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">uint64_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">TEST_LOOPS</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">start</span> <span class="o">=</span> <span class="n">read_rdtsc</span><span class="p">();</span>
</span><span class='line'>      <span class="n">compare_strings</span><span class="p">(</span><span class="n">test_pw</span><span class="p">,</span> <span class="n">pw_ref</span><span class="p">);</span>
</span><span class='line'>      <span class="n">end</span> <span class="o">=</span> <span class="n">read_rdtsc</span><span class="p">();</span>
</span><span class='line'>      <span class="n">time_long</span> <span class="o">+=</span> <span class="p">(</span><span class="n">end</span> <span class="o">-</span> <span class="n">start</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">test_str</span><span class="p">)</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s: %llu</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">test_str</span><span class="p">,</span> <span class="n">time_long</span> <span class="o">/</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">time_long</span> <span class="o">/</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Function that makes a time attack on a provided password. I takes the correct</span>
</span><span class='line'><span class="cm"> * password, then it try to guess the correct letters in this provided password</span>
</span><span class='line'><span class="cm"> * one by one by calling a string compare function. Since the standard string</span>
</span><span class='line'><span class="cm"> * compare (strcmp) function is linear in time when it comes to find the correct</span>
</span><span class='line'><span class="cm"> * answer you can make fairly good guess to find the correct letter. This since</span>
</span><span class='line'><span class="cm"> * the correct letter will have slightly longer execution time compared to the</span>
</span><span class='line'><span class="cm"> * ones with incorrect letters. Therefore loop over a-z and store the letter</span>
</span><span class='line'><span class="cm"> * that had longest running time when doing string compare. Repeat this for all</span>
</span><span class='line'><span class="cm"> * letters and then finally do a full string comparison to see whether we</span>
</span><span class='line'><span class="cm"> * guessed correct or not.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">bool</span> <span class="n">time_attack_pw</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">correct_pw</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">bool</span> <span class="n">result</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">current_char</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">uint64_t</span> <span class="n">current_time</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">uint64_t</span> <span class="n">max_time_found</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">calculated_string</span> <span class="o">=</span> <span class="n">calloc</span><span class="p">(</span><span class="n">strlen</span><span class="p">(</span><span class="n">correct_pw</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">));</span>
</span><span class='line'>  <span class="n">calculated_string</span><span class="p">[</span><span class="n">strlen</span><span class="p">(</span><span class="n">calculated_string</span><span class="p">)]</span> <span class="o">=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* FIXME, why do we need to cut away one? rdtsc inaccuracy? */</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">strlen</span><span class="p">(</span><span class="n">correct_pw</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">max_time_found</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="sc">&#39;a&#39;</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="sc">&#39;z&#39;</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">current_char</span> <span class="o">=</span> <span class="n">j</span><span class="p">;</span>
</span><span class='line'>          <span class="n">current_time</span> <span class="o">=</span>
</span><span class='line'>              <span class="n">do_stat</span><span class="p">(</span><span class="n">correct_pw</span> <span class="o">+</span> <span class="n">i</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">current_char</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">current_time</span> <span class="o">&gt;</span> <span class="n">max_time_found</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">max_time_found</span> <span class="o">=</span> <span class="n">current_time</span><span class="p">;</span>
</span><span class='line'>              <span class="cm">/*</span>
</span><span class='line'><span class="cm">              * Store the letter that gave longest the</span>
</span><span class='line'><span class="cm">              * response time for letter X in position i in</span>
</span><span class='line'><span class="cm">              * the array where we store all guesses.</span>
</span><span class='line'><span class="cm">              */</span>
</span><span class='line'>              <span class="n">calculated_string</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">j</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">dprintf</span><span class="p">(</span><span class="s">&quot;Guessed that pw should be: %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">calculated_string</span><span class="p">);</span>
</span><span class='line'>  <span class="cm">/*</span>
</span><span class='line'><span class="cm">  * Check if the provided string completely matches the calculated</span>
</span><span class='line'><span class="cm">  * string. Ignore the last space, see FIXME above.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">=</span> <span class="n">strncmp</span><span class="p">(</span><span class="n">correct_pw</span><span class="p">,</span> <span class="n">calculated_string</span><span class="p">,</span>
</span><span class='line'>           <span class="n">strlen</span><span class="p">(</span><span class="n">correct_pw</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">free</span><span class="p">(</span><span class="n">calculated_string</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">correct_guesses</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="cm">/*</span>
</span><span class='line'><span class="cm">  * FIXME, last char gives strange values, we add a space here, and strip</span>
</span><span class='line'><span class="cm">  * it away in the time_attack_pw function. I suspect inaccurate rdtsc</span>
</span><span class='line'><span class="cm">  * instruction.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kt">char</span><span class="o">*</span> <span class="n">long_string</span> <span class="o">=</span> <span class="s">&quot;thisisalongstring &quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span><span class="o">*</span> <span class="n">short_string</span> <span class="o">=</span> <span class="s">&quot;foo&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="s">&quot;Shows a couple of examples of the time it takes to make string comparison&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">do_stat</span><span class="p">(</span><span class="n">long_string</span><span class="p">,</span> <span class="n">long_string</span><span class="p">,</span> <span class="s">&quot;avg time long string (thisisalongstring)&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">do_stat</span><span class="p">(</span><span class="n">short_string</span><span class="p">,</span> <span class="n">short_string</span><span class="p">,</span> <span class="s">&quot;avg time short string (foo)&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">do_stat</span><span class="p">(</span><span class="n">short_string</span><span class="p">,</span> <span class="s">&quot;XXX&quot;</span><span class="p">,</span> <span class="s">&quot;avg time 0 char correct (XXX/foo)&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">do_stat</span><span class="p">(</span><span class="n">short_string</span><span class="p">,</span> <span class="s">&quot;fXX&quot;</span><span class="p">,</span> <span class="s">&quot;avg time 1 char correct (fXX/foo)&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">do_stat</span><span class="p">(</span><span class="n">short_string</span><span class="p">,</span> <span class="s">&quot;foX&quot;</span><span class="p">,</span> <span class="s">&quot;avg time 2 char correct (foX/foo)&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">do_stat</span><span class="p">(</span><span class="n">short_string</span><span class="p">,</span> <span class="s">&quot;foo&quot;</span><span class="p">,</span> <span class="s">&quot;avg time 3 char correct (foo/foo)&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">atoi</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">time_attack_pw</span><span class="p">(</span><span class="n">long_string</span><span class="p">))</span>
</span><span class='line'>              <span class="n">correct_guesses</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d successful timing attacks</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">correct_guesses</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (Makefile)</span> <a href='http://jyx.github.io/downloads/code/timing/Makefile'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'><span class="n">CC</span>     <span class="p">:=</span> <span class="n">gcc</span>
</span><span class='line'><span class="n">CFLAGS</span> <span class="p">:=</span> <span class="o">-</span><span class="n">O0</span> <span class="o">-</span><span class="n">g</span>
</span><span class='line'>
</span><span class='line'><span class="n">OBJS</span>   <span class="p">:=</span> <span class="n">time_attack_strcmp</span><span class="p">.</span><span class="n">o</span>
</span><span class='line'><span class="n">BIN</span>    <span class="p">:=</span> <span class="n">main</span>
</span><span class='line'>
</span><span class='line'><span class="n">ifdef</span> <span class="n">DEBUG</span>
</span><span class='line'><span class="n">CFLAGS</span> <span class="o">+</span><span class="p">=</span> <span class="o">-</span><span class="n">DDEBUG</span><span class="p">=</span>$<span class="p">(</span><span class="n">DEBUG</span><span class="p">)</span>
</span><span class='line'><span class="n">endif</span>
</span><span class='line'>
</span><span class='line'><span class="n">all</span><span class="p">:</span> $<span class="p">(</span><span class="n">BIN</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>$<span class="p">(</span><span class="n">BIN</span><span class="p">):</span> $<span class="p">(</span><span class="n">OBJS</span><span class="p">)</span>
</span><span class='line'>  $<span class="p">(</span><span class="n">CC</span><span class="p">)</span> $<span class="p">(</span><span class="n">CFLAGS</span><span class="p">)</span> <span class="o">-</span><span class="n">o</span> $<span class="p">@</span> $^
</span><span class='line'>
</span><span class='line'><span class="c">%.o: %.c</span>
</span><span class='line'>  $<span class="p">(</span><span class="n">CC</span><span class="p">)</span> <span class="o">-</span><span class="n">c</span> $<span class="p">(</span><span class="n">CFLAGS</span><span class="p">)</span> <span class="o">-</span><span class="n">o</span> $<span class="p">@</span> $<span class="o">&lt;</span>
</span><span class='line'>  <span class="p">@</span><span class="n">echo</span> &quot;  <span class="n">CC</span> $<span class="o">&lt;</span>&quot;
</span><span class='line'>
</span><span class='line'><span class="n">valgrind</span><span class="p">:</span>
</span><span class='line'>  <span class="n">valgrind</span> <span class="o">--</span><span class="n">tool</span><span class="p">=</span><span class="n">memcheck</span> <span class="o">--</span><span class="n">leak</span><span class="o">-</span><span class="n">check</span><span class="p">=</span><span class="n">full</span> <span class="o">--</span><span class="n">show</span><span class="o">-</span><span class="n">reachable</span><span class="p">=</span><span class="n">yes</span> <span class="o">./</span>$<span class="p">(</span><span class="n">BIN</span><span class="p">)</span> 10
</span><span class='line'>
</span><span class='line'><span class="n">clean</span><span class="p">:</span>
</span><span class='line'>  <span class="n">rm</span> <span class="o">-</span><span class="n">f</span> $<span class="p">(</span><span class="n">OBJS</span><span class="p">)</span> $<span class="p">(</span><span class="n">BIN</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apply Patches in Git]]></title>
    <link href="http://jyx.github.io/blog/2012/03/09/apply-patches-in-git/"/>
    <updated>2012-03-09T00:16:48+01:00</updated>
    <id>http://jyx.github.io/blog/2012/03/09/apply-patches-in-git</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://jyx.github.io/images/git/logo_git.gif">
One common task that a developer has to do sooner or later is to apply a patch
in Git. I have a simple scheme that I&rsquo;ve been using for a long time and it is
very seldom that I get into problem nowadays when I&rsquo;m doing patch work.</p>

<!-- more -->


<h3>The short version for the impatient</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git am &lt; my_new_feature.patch
</span><span class='line'><span class="nv">$ </span>git apply --reject --whitespace<span class="o">=</span>fix my_new_feature.patch
</span><span class='line'><span class="nv">$ </span>git status
</span><span class='line'><span class="nv">$ </span>vim my_conflicting_file.c*
</span><span class='line'><span class="nv">$ </span>find . -name <span class="s2">&quot;*.rej&quot;</span> -exec rm -f <span class="o">{}</span> <span class="se">\;</span>
</span><span class='line'><span class="nv">$ </span>git add .
</span><span class='line'><span class="nv">$ </span>git am --resolved
</span></code></pre></td></tr></table></div></figure>


<h3>Long version for the one needing explanations to the steps</h3>

<p>To start with I always first try applying the patch with git am, i.e.</p>

<pre><code>$ git am &lt; my_new_feature.patch
</code></pre>

<p>Sometimes this is enough and the patch simply applies, however when it fails to
apply I just continue writing.</p>

<pre><code>$ git apply --reject --whitespace=fix my_new_feature.patch
</code></pre>

<p>This will force Git to apply as much as it can and for the rest of the hunks
that it cannot merge it will produce files ending with .rej. So the next step I
do after git apply is just to run</p>

<pre><code>$ git status
</code></pre>

<p>And notice the untracked files ending in .rej. Now I know what files Git
couldn&rsquo;t merge when applying the patch, so let&rsquo;s say that I have a file called
my_conflicting_file.c which Git couldn&rsquo;t merge. To solve this I open it in my
favorite editor by doing like this:</p>

<pre><code>$ vim my_conflicting_file.c*
</code></pre>

<p>This will open both my_conflicting_file.c and my_conflicting_file.c.rej. I will
split the window in vim (CTRL+W V), and then open the other file by typing :bp
in vim. Now it is up to you as a developer to decicde what changes in the <em>.rej
file should go into the conflicting file. I.e, what changes in
my_conflicting_file.c.rej, should be in my_conflicting_file.c. Sometimes you
will notice that you don&rsquo;t have to change anything at all and sometimes you will
notice that you have to add or remove lines in the conflicting file. Don&rsquo;t
forget to remove the + and/or &ndash; at the start of the lines in the </em>.rej file!
When this step is done I delete all the *.rej files and then add the changes
files to the index in Git. I.e:</p>

<pre><code>$ find . -name "*.rej" -exec rm -f {} \;
$ git add .
</code></pre>

<p>The last step you have to do before the patch have been merged is to tell git
that the &ldquo;am&rdquo; that you started have been resolved.</p>

<pre><code>$ git am --resolved
</code></pre>

<p>Patch work done! If you follow this scheme I&rsquo;m pretty sure that you will do fine
in the future when applying patches.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Perl Pack and Unpack]]></title>
    <link href="http://jyx.github.io/blog/2012/03/04/perl-pack-and-unpack/"/>
    <updated>2012-03-04T00:15:48+01:00</updated>
    <id>http://jyx.github.io/blog/2012/03/04/perl-pack-and-unpack</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://jyx.github.io/images/perlpap/logo_perl.jpg">
When you have to read and write binary data using Perl, then you preferably use
the built in functions pack and unpack. With the pack function you will create
a string which will be different depending on what kind of template you provide
to the pack function (the unpack does the same, but in the opposite direction).</p>

<!-- more -->


<p>I was writing a simple Perl script that was reading a binary file which
contained data that originated from a c struct. I.e, I wanted to parse the
binary file and print what the values would be if the binary file was read into
the c struct.</p>

<p>Let&rsquo;s say that the struct is on the format:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">binary_data</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">uint8_t</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I.e, we have data consisting of 4 bytes for &ldquo;a&rdquo;, 4 bytes for &ldquo;b&rdquo; and 1 byte for
&ldquo;c&rdquo;. Let us say that the binary files consist of the following values</p>

<pre><code>a = 196 dec (0xC4 hex)
b = 4293844428 dec (0xFFEEDDCC hex)
c = 75 dec (0x4B hex)
</code></pre>

<p>then our binary file, &ldquo;binary_data.bin&rdquo; would contain this:</p>

<pre><code>"c4 00 00 00 cc dd ee ff 4b"
</code></pre>

<p>To be able to read this back and print the values in decimal or hex, you simply
start by reading the size of each element in the struct one by one and for each
item you unpack the data according to the size of the element in the struct.
For uint32_t you use &ldquo;L&rdquo; and for uint8_t &ldquo;C&rdquo;. A complete listing of the
different templates (as they are called in Perl) could be found here. Be
careful about little- vs big-endian when you select template.</p>

<p>Below is a Perl script that both create the binary file, then read the data
back from the file and print the values both in decimal and hex.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1">#!/usr/bin/perl</span>
</span><span class='line'><span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">binmode</span> <span class="n">FILE</span><span class="p">;</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$buf</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Write decimal values as binary data.</span>
</span><span class='line'><span class="nb">open</span> <span class="n">FILE</span><span class="p">,</span> <span class="s">&quot;&gt;binary_data.bin&quot;</span> <span class="ow">or</span> <span class="nb">die</span> <span class="vg">$!</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">$data</span> <span class="o">=</span> <span class="nb">pack</span> <span class="s">&#39;L&#39;</span><span class="p">,</span> <span class="mi">196</span><span class="p">;</span>
</span><span class='line'><span class="k">print</span> <span class="n">FILE</span> <span class="nv">$data</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$data</span> <span class="o">=</span> <span class="nb">pack</span> <span class="s">&#39;L&#39;</span><span class="p">,</span> <span class="mi">4293844428</span><span class="p">;</span>
</span><span class='line'><span class="k">print</span> <span class="n">FILE</span> <span class="nv">$data</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$data</span> <span class="o">=</span> <span class="nb">pack</span> <span class="s">&#39;C&#39;</span><span class="p">,</span> <span class="mi">75</span><span class="p">;</span>
</span><span class='line'><span class="k">print</span> <span class="n">FILE</span> <span class="nv">$data</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">close</span> <span class="n">FILE</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Read back binary data to decimal value.</span>
</span><span class='line'><span class="nb">open</span> <span class="n">FILE</span><span class="p">,</span> <span class="s">&quot;binary_data.bin&quot;</span> <span class="ow">or</span> <span class="nb">die</span> <span class="vg">$!</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">read</span> <span class="n">FILE</span><span class="p">,</span> <span class="nv">$buf</span><span class="p">,</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'><span class="nv">$data</span> <span class="o">=</span> <span class="nb">unpack</span> <span class="s">&#39;L&#39;</span><span class="p">,</span> <span class="nv">$buf</span><span class="p">;</span>
</span><span class='line'><span class="k">print</span> <span class="nv">$data</span> <span class="o">.</span> <span class="s">&quot; - &quot;</span> <span class="o">.</span> <span class="nb">sprintf</span><span class="p">(</span><span class="s">&quot;%x&quot;</span><span class="p">,</span> <span class="nv">$data</span><span class="p">)</span> <span class="o">.</span> <span class="s">&quot;\n&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">read</span> <span class="n">FILE</span><span class="p">,</span> <span class="nv">$buf</span><span class="p">,</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'><span class="nv">$data</span> <span class="o">=</span> <span class="nb">unpack</span> <span class="s">&#39;L&#39;</span><span class="p">,</span> <span class="nv">$buf</span><span class="p">;</span>
</span><span class='line'><span class="k">print</span> <span class="nv">$data</span> <span class="o">.</span> <span class="s">&quot; - &quot;</span> <span class="o">.</span> <span class="nb">sprintf</span><span class="p">(</span><span class="s">&quot;%x&quot;</span><span class="p">,</span> <span class="nv">$data</span><span class="p">)</span> <span class="o">.</span> <span class="s">&quot;\n&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">read</span> <span class="n">FILE</span><span class="p">,</span> <span class="nv">$buf</span><span class="p">,</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="nv">$data</span> <span class="o">=</span> <span class="nb">unpack</span> <span class="s">&#39;C&#39;</span><span class="p">,</span> <span class="nv">$buf</span><span class="p">;</span>
</span><span class='line'><span class="k">print</span> <span class="nv">$data</span> <span class="o">.</span> <span class="s">&quot; - &quot;</span> <span class="o">.</span> <span class="nb">sprintf</span><span class="p">(</span><span class="s">&quot;%x&quot;</span><span class="p">,</span> <span class="nv">$data</span><span class="p">)</span> <span class="o">.</span> <span class="s">&quot;\n&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">close</span> <span class="n">FILE</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Libcurl With Minimal Dependencies]]></title>
    <link href="http://jyx.github.io/blog/2010/08/05/using-libcurl-with-minimal-dependencies/"/>
    <updated>2010-08-05T01:13:15+02:00</updated>
    <id>http://jyx.github.io/blog/2010/08/05/using-libcurl-with-minimal-dependencies</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://jyx.github.io/images/libcurldep/logo_curl-200x150.jpg">
For an ongoing project I needed to retrieve webpages from my C-program and
first I used sockets directly, but then I thought why not try use libcurl? If I
could use libcurl and link it statically then I would get the good features
from libcurl, but still could make my application stand alone.</p>

<!-- more -->


<p>With my current setup running Debian (Lenny), I tried to just apt-get the libraries
(libcurl4-openssl-dev) and build using those libraries That went fine until I
tried to link them statically with my application. After reading different mail
archives, forum and tried on my own I got my application to link (static) with
libcurl. Basically what I needed to do was.</p>

<ul>
<li>Download libcurl source</li>
<li>Compile libcurl myself (disable one define, more about that below).</li>
<li>Point to my own built libcurl.a library when building my own application.</li>
</ul>


<p>So to save some headache for myself next time I want to do it or for someone
else reading this I&rsquo;ve listed the steps I had to do to get this to work.</p>

<h3>Download libcurl source</h3>

<p>As of writing this, the latest version of libcurl was 7.21.0 so I downloaded
and unpacked the source.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wget http://curl.haxx.se/download/curl-7.21.0.tar.bz2
</span><span class='line'>tar xjvf curl-7.21.0.tar.bz2
</span></code></pre></td></tr></table></div></figure>


<h3>Compile libcurl</h3>

<p>Next it was time to run ./configure and make. Here I basically disabled
everything for libcurl except HTTP and FILE.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./configure --prefix<span class="o">=</span><span class="nv">$HOME</span>/devel/libcurl --disable-dict --disable-ftp --disable-imap --disable-ldap --disable-ldaps --disable-pop3 --disable-proxy --disable-rtsp --disable-shared --disable-smtp --disable-telnet --disable-tftp --disable-zlib --without-ca-bundle --without-gnutls --without-libidn --without-librtmp --without-libssh2 --without-nss --without-ssl --without-zlib
</span></code></pre></td></tr></table></div></figure>


<p>Edit the file lib/curl_config.h which is generated during the configure step.
In this file we uncomment the line saying</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* Define to 1 if you have the clock_gettime function and monotonic timer. */</span>
</span><span class='line'><span class="c1">//#define HAVE_CLOCK_GETTIME_MONOTONIC 1</span>
</span></code></pre></td></tr></table></div></figure>


<p>If I didn&rsquo;t do this, then I would have a dependency to librt which I didn&rsquo;t want to.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>make
</span><span class='line'>make install
</span></code></pre></td></tr></table></div></figure>


<p>Now I was done with libcurl, next I should use this library in my application.</p>

<h3>Build the application using libcurl</h3>

<p>To make things simple when describing this I instead use the file
<a href="http://curl.haxx.se/libcurl/c/simple.html">simple.c</a>
which is found on <a href="http://curl.haxx.se/libcurl">libcurl&rsquo;s</a> site.</p>

<p>In <a href="http://jyx.github.io/downloads/libcurldep/simple_libcurl.tar.gz">simple_libcurl.tar.gz</a> I&rsquo;ve
put together the source and a Makefile which builds using the library just
created. The magick is the LDFLAGS line used in the linking step on line 12 and
24 below. I.e. on line 12 I had have to point the the folder where the library
is located that I had built myself (-L/path/to/my/libcurl.a) and I still needed
to tell the linker that I wanted to use libcurl, hence the -lcurl parameter.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='make'><span class='line'><span class="nv">SRCDIR</span>   <span class="o">:=</span> src
</span><span class='line'><span class="nv">OBJDIR</span>    <span class="o">:=</span> obj
</span><span class='line'><span class="nv">SRC</span>       <span class="o">:=</span> <span class="k">$(</span>patsubst <span class="k">$(</span>SRCDIR<span class="k">)</span>/%.c, %.c, <span class="k">$(</span>wildcard <span class="k">$(</span>SRCDIR<span class="k">)</span>/*.c<span class="k">))</span>
</span><span class='line'><span class="nv">OBJS</span>  <span class="o">:=</span> <span class="k">$(</span>addprefix <span class="k">$(</span>OBJDIR<span class="k">)</span>/, <span class="k">$(</span>patsubst %.c, %.o, <span class="k">$(</span>SRC<span class="k">)))</span>
</span><span class='line'>
</span><span class='line'><span class="nv">INCDIR</span>    <span class="o">:=</span> inc
</span><span class='line'>
</span><span class='line'><span class="nv">CC</span>        <span class="o">:=</span> gcc
</span><span class='line'><span class="nv">CFLAGS</span>    <span class="o">+=</span> <span class="k">$(</span>addprefix -I, <span class="k">$(</span>INCDIR<span class="k">))</span>
</span><span class='line'><span class="nv">CFLAGS</span>    <span class="o">+=</span> -I/home/jyx/devel/libcurl/include
</span><span class='line'>
</span><span class='line'><span class="nv">LDFLAGS</span>   <span class="o">:=</span> -L/home/jyx/devel/libcurl/lib -lcurl
</span><span class='line'>
</span><span class='line'><span class="nf">.PHONY </span><span class="o">:</span> <span class="m">all clean</span>
</span><span class='line'>
</span><span class='line'><span class="nf">all</span><span class="o">:</span> <span class="m">main</span>
</span><span class='line'>
</span><span class='line'><span class="k">$(</span>OBJDIR<span class="k">)</span>/%.o: <span class="k">$(</span>SRCDIR<span class="k">)</span>/%.c
</span><span class='line'>  @echo <span class="s2">&quot; (CC)  $&lt;&quot;</span>
</span><span class='line'>  @<span class="k">$(</span>CC<span class="k">)</span> <span class="k">$(</span>CFLAGS<span class="k">)</span> -c <span class="nv">$&lt;</span> -o <span class="nv">$@</span>
</span><span class='line'>
</span><span class='line'>main: <span class="k">$(</span>OBJS<span class="k">)</span>
</span><span class='line'>  @echo <span class="s2">&quot;Create binary: $@&quot;</span>
</span><span class='line'>  @<span class="k">$(</span>CC<span class="k">)</span> -o main <span class="nv">$+</span> <span class="k">$(</span>LDFLAGS<span class="k">)</span>
</span><span class='line'>
</span><span class='line'>clean:
</span><span class='line'>  rm -f <span class="k">$(</span>OBJDIR<span class="k">)</span>/* main
</span></code></pre></td></tr></table></div></figure>


<p>When this is achieved, then you have a quite clean binary when it comes to
dependencies. In the example code in simple_libcurl I now have these
dependencies on a machine running Debian (Lenny).</p>

<pre><code>$ ldd main
    linux-vdso.so.1 =&gt;  (0x00007f157db66000)
    libc.so.6 =&gt; /lib/libc.so.6 (0x00007f157d5f9000)
    /lib64/ld-linux-x86-64.so.2 (0x00007f157d94c000)
</code></pre>

<p>Have fun with libcurl!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Coming iPhone Application]]></title>
    <link href="http://jyx.github.io/blog/2010/04/25/my-coming-iphone-application/"/>
    <updated>2010-04-25T01:11:17+02:00</updated>
    <id>http://jyx.github.io/blog/2010/04/25/my-coming-iphone-application</id>
    <content type="html"><![CDATA[<p>I just want to show an early screenshot of my coming iPhone application that
I&rsquo;m currently is writing. I do not want to say to much about what purpose it
should fulfill, but it&rsquo;s kind of a maths / algorithm / practice application.
Below is screenshot of how it (most likely) will look.</p>

<!-- more -->


<p><img src="http://jyx.github.io/images/iphonebd//bd_preview.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What About Total Commander?]]></title>
    <link href="http://jyx.github.io/blog/2010/03/12/what-about-total-commander/"/>
    <updated>2010-03-12T00:06:26+01:00</updated>
    <id>http://jyx.github.io/blog/2010/03/12/what-about-total-commander</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://jyx.github.io/images/totcmd/logo_tc.jpg">
As my first post on my new site I&rsquo;ll start by talking about Total Commander. I
have been using this wonderful tools since I think I got my first PC. Back then
it was called Windows Commander. So what is it that makes this tool so
wonderful?</p>

<!-- more -->


<p>Well, if you just install it and start it you maybe won&rsquo;t be that
impressed. It has a quite old and perhaps boring look. But, if I can choose
between good looking tool without any features (Windows Explorer) and a not so
good looking tool with almost any features you can think of that is needed or
could be nice to have when it comes to file handling on a computer. Then I
choose the latter one. Which, in this case is Total Commander.</p>

<p>So, what do you normally do with your files on your computer? For a normal user
you open files and maybe move files. That might be it for a big part of the
population. But if you are a slightly more advanced user? Then you might need to
duplicate files, pack/unpack files. You maybe want to filter the files so you
only will se files matching a certain pattern. You maybe want to synchronize
your files on a backup drive? Want to syntax hi-light files with certain name?
Copy file names with or without full path to clipboard? All of this and much
more you can do with Total Commander and as a good bonus there are quite easy
keyboard shortcuts for doing that. So you don&rsquo;t have to move one of you hands
between the keyboard and the mouse all the time.</p>

<h3>The look</h3>

<p>Total Commander is  composed as one main window with a split pane. First time I
saw this was back in time when Amiga 500 was a popular computer. I&rsquo;m thinking of
the file manager <a href="http://en.wikipedia.org/wiki/Directory_Opus">Directory Opus</a>.
Is this a good or a bad thing? Well, since it still exists and seems to be quite
popular among people that have some higher demand on file exploring tool than
the average user have, then I think we can say, yes it&rsquo;s a good thing. To be
honest it&rsquo;s actually very good. You have two panes open all the time within the
same program, so you can very easy move, copy files etc. Since quite some time
ago Total Commander also supports tabs. Hence you can have multiple tabs for
both panes. You jump between the panes by simply pressing TAB and you jump
between tabs in the panes by pressing CTRL + TAB.</p>

<h3>Renaming on steroids</h3>

<p>There&rsquo;s something called Multi-Rename Tool in Total Commander which is quite
handy. It can rename a lot of files for you in very few clicks. Imagine you have
a folder with following files:</p>

<pre><code>a_foo.zip
b_foo.zip
c_foo.zip
</code></pre>

<p>Now you wan&rsquo;t to rename those to:</p>

<pre><code>01_a.zip
02_b.zip
03_c.zip
</code></pre>

<p>In Total Commander you simply mark the files and press CTRL + M and the
Multi-Rename Tool will launch. In this particular example you prepend the
&ldquo;Rename mask: file name&rdquo; with &ldquo;01_&rdquo; and in the &ldquo;Search &amp; Replace&rdquo; you write
&ldquo;_foo&rdquo; in the &ldquo;Search For&rdquo;, like shown in the screenshot below.</p>

<p><img src="http://jyx.github.io/images/totcmd/tc_multi_rename_tool.png"></p>

<p>You can just imaging how helpful this is when you are renaming a couple of
hundred jpg files taken with your digital camera where you often have quite
cryptic naming as default.</p>

<h3>Shortcuts and some more features</h3>

<p>I could explain a bunch of features like the Multi-Rename Tool in detail. But
some features are very simple to use, so I list a couple of my daily things I do
using Total Commander.</p>

<p>Let&rsquo;s say you have c:\a in the left pane and c:\b in the right pane.</p>

<p>Mark files? Use space or SHIFT + PgUp/PgDown or CTRL + plus or simply press plus
and make a filter out the files.</p>

<p>Want to move files from folder a to b? Mark the files you want to move and press
F6.</p>

<p>Rename a file? SHIFT + F6. This is a bit odd, since most other program have F2
as rename button.</p>

<p>Pack files? Mark the files, ALT + F5, then ENTER. Files are now packed and put
into the folder on the other pane.</p>

<p>Unpack files? Mark the files, ALT + F9 then ENTER. Files are unpacked to the
other pane.</p>

<p>Browse packed files? Simply press ENTER on a zip file for example and you will
see the content immediately without unpacking it. Very useful! Note that you can
copy single files when in this state. This is also very useful.</p>

<p>Find files? Alt + F7, then just search. Note the &ldquo;Search subdirectories&rdquo; which
is very useful of you have a big project with a lot of subfolder but you know
that the file you are searching is not that deep down into the folder structure.
Then you use this to select how many subdirectories you want to traverse. Very
useful, especially in combination with the &ldquo;Find text&rdquo; in the same window.</p>

<p>Go to folders that you have been in? Press ALT + down and you get a neat list
for the last ~30 folders you have been in. Note that this is unique for the
pane. I.e. one for the left pane and one for the right pane.</p>

<p>Run a command? Just type it and press ENTER. For example I want command prompt.
I simply type &ldquo;cmd&rdquo; then press enter. Voila I get a command prompt which have
the path same to my current folder in my pane.</p>

<p>Mark a folder as favorite? Press CTRL + d then a. Type any name you like to
refer to this folder.</p>

<p>Go to a favorite folder? Press CTRL + d and select your favorite folder.</p>

<p>Do a mouse right click? Press SHIFT + F10.</p>

<p>View content of a file? Press F3.</p>

<p>Edit a file? Press F4.</p>

<h3>Should you buy Total Commander?</h3>

<p>Well, at least download it asap and start using it. If you just want to try it,
you will only get one(!) nag screen when starting the program. Then you can
leave it running for hours, days, weeks, years with full functionality and no
more nag screens. But, when you notice that you cannot really live without this
tool, then I think you should register the program. Christian Ghisler (the
author) deserves money for this great tool and he has given free updates since I
registered it, which was quite long time ago. As the headline says, I think
Microsoft should buy this tool/company and replace Windows Explorer with Total
Commander. Thanks!</p>

<p>Link to the official site: <a href="http://www.ghisler.com/">http://www.ghisler.com/</a></p>
]]></content>
  </entry>
  
</feed>
