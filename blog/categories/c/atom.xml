<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C | joakimbech.com]]></title>
  <link href="http://jyx.github.io/blog/categories/c/atom.xml" rel="self"/>
  <link href="http://jyx.github.io/"/>
  <updated>2013-12-20T15:01:30+01:00</updated>
  <id>http://jyx.github.io/</id>
  <author>
    <name><![CDATA[Joakim Bech]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Libcurl With Minimal Dependencies]]></title>
    <link href="http://jyx.github.io/blog/2010/08/05/using-libcurl-with-minimal-dependencies/"/>
    <updated>2010-08-05T01:13:15+02:00</updated>
    <id>http://jyx.github.io/blog/2010/08/05/using-libcurl-with-minimal-dependencies</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/libcurldep/logo_curl-200x150.jpg">
For an ongoing project I needed to retrieve webpages from my C-program and
first I used sockets directly, but then I thought why not try use libcurl? If I
could use libcurl and link it statically then I would get the good features
from libcurl, but still could make my application stand alone.</p>

<!-- more -->


<p>With my current setup running Debian (Lenny), I tried to just apt-get the libraries
(libcurl4-openssl-dev) and build using those libraries That went fine until I
tried to link them statically with my application. After reading different mail
archives, forum and tried on my own I got my application to link (static) with
libcurl. Basically what I needed to do was.</p>

<ul>
<li>Download libcurl source</li>
<li>Compile libcurl myself (disable one define, more about that below).</li>
<li>Point to my own built libcurl.a library when building my own application.</li>
</ul>


<p>So to save some headache for myself next time I want to do it or for someone
else reading this I&rsquo;ve listed the steps I had to do to get this to work.</p>

<h3>Download libcurl source</h3>

<p>As of writing this, the latest version of libcurl was 7.21.0 so I downloaded
and unpacked the source.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wget &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;http://curl.haxx.se/download/curl-7.21.0.tar.bz2&quot;</span>&gt;http://curl.haxx.se/download/curl-7.21.0.tar.bz2&lt;/a&gt;
</span><span class='line'>tar xjvf curl-7.21.0.tar.bz2
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Compile libcurl</h3>

<p>Next it was time to run ./configure and make. Here I basically disabled
everything for libcurl except HTTP and FILE.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./configure &amp;mdash;prefix<span class="o">=</span><span class="nv">$HOME</span>/devel/libcurl &amp;mdash;disable-dict &amp;mdash;disable-ftp &amp;mdash;disable-imap &amp;mdash;disable-ldap &amp;mdash;disable-ldaps &amp;mdash;disable-pop3 &amp;mdash;disable-proxy &amp;mdash;disable-rtsp &amp;mdash;disable-shared &amp;mdash;disable-smtp &amp;mdash;disable-telnet &amp;mdash;disable-tftp &amp;mdash;disable-zlib &amp;mdash;without-ca-bundle &amp;mdash;without-gnutls &amp;mdash;without-libidn &amp;mdash;without-librtmp &amp;mdash;without-libssh2 &amp;mdash;without-nss &amp;mdash;without-ssl &amp;mdash;without-zlib
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Edit the file lib/curl_config.h which is generated during the configure step.
In this file we uncomment the line saying</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">Define</span> <span class="n">to</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">you</span> <span class="n">have</span> <span class="n">the</span> <span class="n">clock_gettime</span> <span class="n">function</span> <span class="n">and</span> <span class="n">monotonic</span> <span class="n">timer</span><span class="p">.</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="c1">//#define HAVE_CLOCK_GETTIME_MONOTONIC 1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If I didn&rsquo;t do this, then I would have a dependency to librt which I didn&rsquo;t want to.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>make
</span><span class='line'>make install
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now I was done with libcurl, next I should use this library in my application.</p>

<h3>Build the application using libcurl</h3>

<p>To make things simple when describing this I instead use the file
<a href="http://curl.haxx.se/libcurl/c/simple.html">simple.c</a>
which is found on <a href="http://curl.haxx.se/libcurl">libcurl&rsquo;s</a> site.</p>

<p>In <a href="/downloads/libcurldep/simple_libcurl.tar.gz">simple_libcurl.tar.gz</a> I&rsquo;ve
put together the source and a Makefile which builds using the library just
created. The magick is the LDFLAGS line used in the linking step on line 12 and
24 below. I.e. on line 12 I had have to point the the folder where the library
is located that I had built myself (-L/path/to/my/libcurl.a) and I still needed
to tell the linker that I wanted to use libcurl, hence the -lcurl parameter.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='make'><span class='line'><span class="nv">SRCDIR</span>  <span class="o">:=</span> src
</span><span class='line'><span class="nv">OBJDIR</span>  <span class="o">:=</span> obj
</span><span class='line'><span class="nv">SRC</span>     <span class="o">:=</span> <span class="k">$(</span>patsubst <span class="k">$(</span>SRCDIR<span class="k">)</span>/%.c, %.c, <span class="k">$(</span>wildcard <span class="k">$(</span>SRCDIR<span class="k">)</span>/*.c<span class="k">))</span>
</span><span class='line'><span class="nv">OBJS</span>    <span class="o">:=</span> <span class="k">$(</span>addprefix <span class="k">$(</span>OBJDIR<span class="k">)</span>/, <span class="k">$(</span>patsubst %.c, %.o, <span class="k">$(</span>SRC<span class="k">)))</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'><span class="nf">&lt;p&gt;INCDIR  </span><span class="o">:</span><span class="m">= inc&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nf">&lt;p&gt;CC      </span><span class="o">:</span><span class="m">= gcc</span>
</span><span class='line'><span class="nv">CFLAGS</span>  <span class="o">+=</span> <span class="k">$(</span>addprefix -I, <span class="k">$(</span>INCDIR<span class="k">))</span>
</span><span class='line'><span class="nv">CFLAGS</span>  <span class="o">+=</span> -I/home/jyx/devel/libcurl/include&lt;/p&gt;
</span><span class='line'>
</span><span class='line'><span class="nf">&lt;p&gt;LDFLAGS </span><span class="o">:</span><span class="m">= -L/home/jyx/devel/libcurl/lib -lcurl&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nf">&lt;p&gt;.PHONY </span><span class="o">:</span> <span class="m">all clean&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nf">&lt;p&gt;all</span><span class="o">:</span> <span class="m">main&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nf">&lt;p&gt;$(OBJDIR)/%.o</span><span class="o">:</span> <span class="m">$(SRCDIR)/%.c&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;pre&gt;&lt;code&gt;@echo</span> <span class="s2">&quot; (CC)    $&amp;lt;&quot;</span>
</span><span class='line'><span class="err">@</span><span class="k">$(</span>CC<span class="k">)</span> <span class="k">$(</span>CFLAGS<span class="k">)</span> -c <span class="nv">$&amp;</span>lt; -o <span class="nv">$@</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;main: <span class="k">$(</span>OBJS<span class="k">)</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;@echo <span class="s2">&quot;Create binary: $@&quot;</span>
</span><span class='line'>@<span class="k">$(</span>CC<span class="k">)</span> -o main <span class="nv">$+</span> <span class="k">$(</span>LDFLAGS<span class="k">)</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;clean:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;rm -f <span class="k">$(</span>OBJDIR<span class="k">)</span>/* main
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>When this is achieved, then you have a quite clean binary when it comes to
dependencies. In the example code in simple_libcurl I now have these
dependencies on a machine running Debian (Lenny).</p>

<pre><code>$ ldd main
    linux-vdso.so.1 =&gt;  (0x00007f157db66000)
    libc.so.6 =&gt; /lib/libc.so.6 (0x00007f157d5f9000)
    /lib64/ld-linux-x86-64.so.2 (0x00007f157d94c000)
</code></pre>

<p>Have fun with libcurl!</p>
]]></content>
  </entry>
  
</feed>
