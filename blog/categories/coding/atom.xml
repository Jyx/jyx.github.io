<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Coding | joakimbech.com]]></title>
  <link href="http://jyx.github.io/blog/categories/coding/atom.xml" rel="self"/>
  <link href="http://jyx.github.io/"/>
  <updated>2015-03-14T15:53:58+01:00</updated>
  <id>http://jyx.github.io/</id>
  <author>
    <name><![CDATA[Joakim Bech]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fetchmail and GnuPG]]></title>
    <link href="http://jyx.github.io/blog/2014/11/01/fetchmail-and-gnupg/"/>
    <updated>2014-11-01T23:02:03+01:00</updated>
    <id>http://jyx.github.io/blog/2014/11/01/fetchmail-and-gnupg</id>
    <content type="html"><![CDATA[<p>When using <a href="http://en.wikipedia.org/wiki/Internet_Message_Access_Protocol">imap</a>
in <a href="http://en.wikipedia.org/wiki/Mutt_(email_client)">mutt</a> you have the
possibility to use gpg to decrypt your password instead of having it as
plaintext in your configuration file (.muttrc), see
<a href="https://wiki.archlinux.org/index.php/Mutt#Passwords_management">ArchWiki</a> how
to do that.</p>

<p>However, if you consider using POP3, then you will also need to install and
enable <a href="http://msmtp.sourceforge.net">msmtp</a> (not strictly needed),
<a href="http://www.fetchmail.info">fetchmail</a> and
<a href="http://www.procmail.org">procmail</a>. Ubuntu have created a quite nice
<a href="https://help.ubuntu.com/community/MuttAndGmail">guide</a> of
the steps involved.</p>

<!-- more -->


<p>Just as mutt also msmtp have the possibility to use gpg in runtime instead of
having the password stored in plaintext. The way to do that in msmtp is to put a
line mention gpg in your $HOME/.msmtprc file.</p>

<p><code>bash
passwordeval    "gpg --quiet --for-your-eyes-only --no-tty --decrypt ~/.msmtp-gmail.gpg"
</code></p>

<p>However, fetchmail doesn&rsquo;t have the same option. So, mutt and msmtp is fine, but
you still have to put your password in a cleartext file when configuring
fetchmail. Clearly there must be a better way to handle this? I downloaded the
source code
(<a href="http://sourceforge.net/projects/fetchmail/files/branch_6.3/fetchmail-6.3.26.tar.xz/download">fetchmail-6.3.26</a>)
and did a quick and dirty hack. I just modified the main function in the file
fetchmail.c, so that instead of having to provide the password on commandline
(when password isn&rsquo;t set in $HOME/.fetchmailrc) it makes use of gpg similar to how
both mutt and msmtp does. It isn&rsquo;t pretty &hellip; but it works (tested on Arch Linux
on a Raspberry PI). To try it out, use the same gpg encrypted file as you use
for msmtp, i.e, $HOME/msmtp-gmail.gpg and patch fetchmail using this patch and
rebuild.</p>

<p>+<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>fetchmail patch  (fetchmail_gpg.patch)</span> <a href='/downloads/code/patch/fetchmail_gpg.patch'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gh">diff --git a/fetchmail.c b/fetchmail.c</span>
</span><span class='line'><span class="gh">index ae30f90..6462dfe 100644</span>
</span><span class='line'><span class="gd">--- a/fetchmail.c</span>
</span><span class='line'><span class="gi">+++ b/fetchmail.c</span>
</span><span class='line'><span class="gu">@@ -573,6 +573,28 @@ int main(int argc, char **argv)</span>
</span><span class='line'> 			ctl-&gt;remotename, ctl-&gt;server.pollname);
</span><span class='line'> 		return(PS_AUTHFAIL);
</span><span class='line'> 	    } else {
</span><span class='line'><span class="gi">+#define ENABLE_GPG_PASSWORD</span>
</span><span class='line'><span class="gi">+#ifdef ENABLE_GPG_PASSWORD</span>
</span><span class='line'><span class="gi">+		FILE *f;</span>
</span><span class='line'><span class="gi">+		f = popen(&quot;/usr/bin/gpg -dq $HOME/.msmtp-gmail.gpg&quot;, &quot;r&quot;);</span>
</span><span class='line'><span class="gi">+		if (f)</span>
</span><span class='line'><span class="gi">+		{</span>
</span><span class='line'><span class="gi">+		    tmpbuf = (char *)xmalloc(64);</span>
</span><span class='line'><span class="gi">+		    memset(tmpbuf, 0, 64);</span>
</span><span class='line'><span class="gi">+		    fgets(tmpbuf, 64, f);</span>
</span><span class='line'><span class="gi">+		    pclose(f);</span>
</span><span class='line'><span class="gi">+</span>
</span><span class='line'><span class="gi">+		    /* Remove the newline character. */</span>
</span><span class='line'><span class="gi">+		    tmpbuf[strlen(tmpbuf)-1] = &#39;\0&#39;;</span>
</span><span class='line'><span class="gi">+		    ctl-&gt;password = xstrdup(tmpbuf);</span>
</span><span class='line'><span class="gi">+		    /* fprintf(stdout, &quot;pw: %s : %d\n&quot;, ctl-&gt;password, strlen(ctl-&gt;password)); */</span>
</span><span class='line'><span class="gi">+		    free(tmpbuf);</span>
</span><span class='line'><span class="gi">+		}</span>
</span><span class='line'><span class="gi">+		else</span>
</span><span class='line'><span class="gi">+		{</span>
</span><span class='line'><span class="gi">+		    fprintf(stderr, &quot;No encrypted file at $HOME/.msmtp-gmail.gpg&quot;);</span>
</span><span class='line'><span class="gi">+		}</span>
</span><span class='line'><span class="gi">+#else</span>
</span><span class='line'> 		const char* password_prompt = GT_(&quot;Enter password for %s@%s: &quot;);
</span><span class='line'> 		size_t pplen = strlen(password_prompt) + strlen(ctl-&gt;remotename) + strlen(ctl-&gt;server.pollname) + 1;
</span><span class='line'>
</span><span class='line'><span class="gu">@@ -580,7 +602,9 @@ int main(int argc, char **argv)</span>
</span><span class='line'> 		snprintf(tmpbuf, pplen, password_prompt,
</span><span class='line'> 			ctl-&gt;remotename, ctl-&gt;server.pollname);
</span><span class='line'> 		ctl-&gt;password = xstrdup((char *)fm_getpassword(tmpbuf));
</span><span class='line'><span class="gi">+		fprintf(stdout, &quot;pw: %s : %d\n&quot;, ctl-&gt;password, strlen(ctl-&gt;password));</span>
</span><span class='line'> 		free(tmpbuf);
</span><span class='line'><span class="gi">+#endif</span>
</span><span class='line'> 	    }
</span><span class='line'> 	}
</span><span class='line'>     }
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Timing Attack - Proof of Concept]]></title>
    <link href="http://jyx.github.io/blog/2014/02/02/timing-attack-proof-of-concept/"/>
    <updated>2014-02-02T10:38:37+01:00</updated>
    <id>http://jyx.github.io/blog/2014/02/02/timing-attack-proof-of-concept</id>
    <content type="html"><![CDATA[<p>You might have heard about timing attacks, but either thought it sounded
too complicated to understand or that it is too complicated to actually do such
an attack. In this post I&rsquo;m going to give a brief overview of a timing attack
and also provide some example code that you can play with on your own. Hopefully
after reading this post you will understand that you cannot neglect this if you
are creating a system where security is needed.</p>

<!-- more -->


<h3>What is a timing attack</h3>

<p>A <a href="http://en.wikipedia.org/wiki/Timing_attack">timing attack</a> is a so called
<a href="http://en.wikipedia.org/wiki/Side_channel_attack">side channel attack</a>
where you analyze the timing information on a system is such a way that it
allows to break the protection of the system or a program running on it.</p>

<h3>How is a timing attack done?</h3>

<p>Typically you need to measure the amount of time needed to do operations of some
kind. You can do this in several ways, for example you could hook up a set of
probes on a chip or a PCB and watch the result on an oscilloscope or a logical
analyzer. Another option is to simply leverage features from the
CPU/architecture itself. On a normal PC running Intel (or AMD) you can use the
time stamp counter <a href="http://en.wikipedia.org/wiki/Time_Stamp_Counter">rdtsc</a>
or a High Precision Event Timer
<a href="http://en.wikipedia.org/wiki/High_Precision_Event_Timer">hpet</a>. Be aware that
the time stamp counter isn&rsquo;t reliable any longer, since process speeds can
change (due to power management), you have context switches etc. But just for
testing it can be good enough.</p>

<p>So you have found a way of taking time measures, what next? The easy answer is,
start measure the execution time of sensitive functions. For example when
calling functions that verifies password, functions that does encryption and
such. Measuring the time needed for strcmp as exemplified in the proof of
concept code below is easy. It becomes more complicated if you want to do the
same when doing
<a href="http://en.wikipedia.org/wiki/Advanced_Encryption_Standard#Side-channel_attacks">AES</a>
encryption for example. It is still doable, but you also need to know the
algorithm to know where to look and how to interpretate the leaked information.</p>

<h3>Countermeasures</h3>

<p>TBD, but the main idea is that you need balance the string compare functions so
that it always takes the same amount of time to perform.</p>

<h3>Proof of concept</h3>

<p>I have created a small proof of concept / testing program to show that it is
actually not that complicated to do a timing attack. It is unlikely that it is
as easy as this, but still, it gives the idea and shows that you can actually
use timing to guess password, guesses that are fairly good. The main idea is to
show how execution time actually varies when doing string comparison. The by
using this information leakage we show that we can guess pretty good what we
believe the correct character is in the correct password/string.</p>

<h4>The algorithm</h4>

<ol>
<li>Loop over all characters, one by one in the string that we want to check
(&ldquo;thisisalongstring&rdquo; in this case).</li>
<li>For every character in the string, do an inner loop, where you are looping
from &lsquo;a&rsquo; to &lsquo;z&rsquo;. For every call to the string comparison function record the
amount of time it took. The letter that had longest execution time is most
likely the correct character. Hence save that character in the in the array
that contains guessed character.</li>
<li>Lastly compare the correct string with guessed string to see if we got all
timing based guesses correct or not.</li>
</ol>


<h4>Results</h4>

<p>Here are the test result of a test run with debug information enabled</p>

<pre><code>make DEBUG=1 &amp;&amp; ./main 10
</code></pre>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>./main 10
</span><span class='line'>Shows a couple of examples of the <span class="nb">time </span>it takes to make string comparison
</span><span class='line'>avg <span class="nb">time </span>long string <span class="o">(</span>thisisalongstring<span class="o">)</span>: 821
</span><span class='line'>avg <span class="nb">time </span>short string <span class="o">(</span>foo<span class="o">)</span>: 532
</span><span class='line'>avg <span class="nb">time </span>0 char correct <span class="o">(</span>XXX/foo<span class="o">)</span>: 486
</span><span class='line'>avg <span class="nb">time </span>1 char correct <span class="o">(</span>fXX/foo<span class="o">)</span>: 495
</span><span class='line'>avg <span class="nb">time </span>2 char correct <span class="o">(</span>foX/foo<span class="o">)</span>: 540
</span><span class='line'>avg <span class="nb">time </span>3 char correct <span class="o">(</span>foo/foo<span class="o">)</span>: 561
</span><span class='line'>Guessed that pw should be: thisisalongshring
</span><span class='line'>Guessed that pw should be: thisisalongstring
</span><span class='line'>Guessed that pw should be: thisisalongstring
</span><span class='line'>Guessed that pw should be: thhbisalongstring
</span><span class='line'>Guessed that pw should be: thisisalongstring
</span><span class='line'>Guessed that pw should be: thisisalongstring
</span><span class='line'>Guessed that pw should be: thisisalongstring
</span><span class='line'>Guessed that pw should be: thisisalongstring
</span><span class='line'>Guessed that pw should be: thisimalongstrimf
</span><span class='line'>Guessed that pw should be: thisisalongstrhng
</span><span class='line'>6 successful timing attacks
</span></code></pre></td></tr></table></div></figure></notextile></div>
The figures will vary, but they are almost always in the same region. Looking
at:</p>

<p><strong>Line 3</strong>: we can see that it takes 821 time units for a full and correct string
compare of the string &ldquo;thisisalongstring&rdquo;.</p>

<p><strong>Line 4</strong>: we can see that it takes 532 time units to correctly match the string
&ldquo;foo&rdquo;.</p>

<p><strong>Line 5-8</strong>: for every trail, we add a correct matching character and as expected
we can see that the time increases for every correct character. This is because
the string compare function as said before has a timing linear to the correct
number of characters.</p>

<p><strong>Line 9-19</strong>: shows the result when trying to guess the string
&ldquo;thisisalongstring&rdquo; based on the time it takes to guess a, b, c, &hellip; z, for
every character. This particular run we guessed correct 6 out or 10 times.
Not that bad, it takes roughly 0.002 seconds to run everything above. According
to Steve Gibson&rsquo;s <a href="https://www.grc.com/haystack.htm">Password Haystack</a> page, it
takes approximately 3.75 centuries to brute force that password <strong>once</strong> using a
what he calls a &ldquo;massive cracking array scenario (assuming one hundred trillion
guesses per second)&rdquo;.</p>

<h4>A couple of interesting things I&rsquo;ve noticed</h4>

<ul>
<li>If I increase the TEST_LOOPS define I actually get much worse result?</li>
<li>If I turn on all optimizations, i.e. -O3, it doesn&rsquo;t work at all.</li>
<li>The last character was always incorrectly guessed and that is the reason why
I&rsquo;ve added a space at the end of the string &ldquo;thisisalongstring &rdquo;, which I
later on strip away. I believe the reason for this problem is inaccuray using
rdtsc.</li>
</ul>


<p>If any reader of this post knows the answer to my reflections above, please
leave a comment.</p>

<h4>Source code</h4>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (time_attack_strcmp.c)</span> <a href='/downloads/code/timing/time_attack_strcmp.c'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Time attack proof of concept / tutorial.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Author: Joakim Bech &lt;joakim.bech@gmail.com&gt;</span>
</span><span class='line'><span class="cm"> * Date: 2014-02-02</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="cp">#include &lt;stdbool.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdint.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define TEST_LOOPS 1</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef DEBUG</span>
</span><span class='line'><span class="cp">#define dprintf printf</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'><span class="cp">#define dprintf</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * strcmp taken from from glibc 2.13, just for reference.</span>
</span><span class='line'><span class="cm"> * Compare S1 and S2, returning less than, equal to or</span>
</span><span class='line'><span class="cm"> * greater than zero if S1 is lexicographically less than,</span>
</span><span class='line'><span class="cm"> *  equal to or greater than S2.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="n">strcmp2</span><span class="p">(</span><span class="n">p1</span><span class="p">,</span> <span class="n">p2</span><span class="p">)</span>
</span><span class='line'>	<span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">p1</span><span class="p">;</span>
</span><span class='line'>	<span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">p2</span><span class="p">;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>	<span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s1</span> <span class="o">=</span> <span class="p">(</span><span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="n">p1</span><span class="p">;</span>
</span><span class='line'>	<span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s2</span> <span class="o">=</span> <span class="p">(</span><span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="n">p2</span><span class="p">;</span>
</span><span class='line'>	<span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">c1</span><span class="p">,</span> <span class="n">c2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>	<span class="k">do</span>
</span><span class='line'>	<span class="p">{</span>
</span><span class='line'>		<span class="n">c1</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="p">)</span> <span class="o">*</span><span class="n">s1</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>		<span class="n">c2</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="p">)</span> <span class="o">*</span><span class="n">s2</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>		<span class="k">if</span> <span class="p">(</span><span class="n">c1</span> <span class="o">==</span> <span class="sc">&#39;\0&#39;</span><span class="p">)</span>
</span><span class='line'>			<span class="k">return</span> <span class="n">c1</span> <span class="o">-</span> <span class="n">c2</span><span class="p">;</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'>	<span class="k">while</span> <span class="p">(</span><span class="n">c1</span> <span class="o">==</span> <span class="n">c2</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>	<span class="k">return</span> <span class="n">c1</span> <span class="o">-</span> <span class="n">c2</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Change &quot;strcmp2&quot; to some other comparing function that you want to test.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">static</span> <span class="n">bool</span> <span class="n">compare_strings</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span> <span class="n">str1</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">str2</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>	<span class="k">return</span> <span class="n">strcmp2</span><span class="p">(</span><span class="n">str1</span><span class="p">,</span> <span class="n">str2</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * A wrapper for the cpu instruction rdtsc, which stores the current cycle</span>
</span><span class='line'><span class="cm"> * number as a 64 bit number. The cpuid instruction is included because it</span>
</span><span class='line'><span class="cm"> * forces inorder execution. (See the 1997 Intel document on using rdtsc for</span>
</span><span class='line'><span class="cm"> * performance testing cited in the bibliography).</span>
</span><span class='line'><span class="cm"> * Grabbed from password.c by Dan Halperin (which also is a time attack proof</span>
</span><span class='line'><span class="cm"> * of concept).</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Be aware that rdtsc isn&#39;t reliable on a multicore system and power management</span>
</span><span class='line'><span class="cm"> * features have also made it even more inaccurate. However it works quite good</span>
</span><span class='line'><span class="cm"> * for the purpose of this demonstration.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">static</span> <span class="kr">inline</span> <span class="kt">uint64_t</span> <span class="n">read_rdtsc</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>	<span class="kt">uint64_t</span> <span class="n">d</span><span class="p">;</span>
</span><span class='line'>	<span class="n">__asm__</span> <span class="nf">__volatile__</span> <span class="p">(</span><span class="s">&quot;cpuid </span><span class="se">\n</span><span class="s"> rdtsc&quot;</span> <span class="o">:</span> <span class="s">&quot;=A&quot;</span> <span class="p">(</span><span class="n">d</span><span class="p">));</span>
</span><span class='line'>	<span class="k">return</span> <span class="n">d</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Function that calculates the average time it takes to make TEST_LOOPS string</span>
</span><span class='line'><span class="cm"> * comparisons.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">static</span> <span class="kt">uint64_t</span> <span class="n">do_stat</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">pw_ref</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">test_pw</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">test_str</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>	<span class="kt">uint64_t</span> <span class="n">time_long</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>	<span class="kt">uint64_t</span> <span class="n">start</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>	<span class="kt">uint64_t</span> <span class="n">end</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>	<span class="kt">uint64_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>	<span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">TEST_LOOPS</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>	<span class="p">{</span>
</span><span class='line'>		<span class="n">start</span> <span class="o">=</span> <span class="n">read_rdtsc</span><span class="p">();</span>
</span><span class='line'>		<span class="n">compare_strings</span><span class="p">(</span><span class="n">test_pw</span><span class="p">,</span> <span class="n">pw_ref</span><span class="p">);</span>
</span><span class='line'>		<span class="n">end</span> <span class="o">=</span> <span class="n">read_rdtsc</span><span class="p">();</span>
</span><span class='line'>		<span class="n">time_long</span> <span class="o">+=</span> <span class="p">(</span><span class="n">end</span> <span class="o">-</span> <span class="n">start</span><span class="p">);</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'>
</span><span class='line'>	<span class="k">if</span> <span class="p">(</span><span class="n">test_str</span><span class="p">)</span>
</span><span class='line'>		<span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s: %llu</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">test_str</span><span class="p">,</span> <span class="n">time_long</span> <span class="o">/</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>	<span class="k">return</span> <span class="n">time_long</span> <span class="o">/</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Function that makes a time attack on a provided password. I takes the correct</span>
</span><span class='line'><span class="cm"> * password, then it try to guess the correct letters in this provided password</span>
</span><span class='line'><span class="cm"> * one by one by calling a string compare function. Since the standard string</span>
</span><span class='line'><span class="cm"> * compare (strcmp) function is linear in time when it comes to find the correct</span>
</span><span class='line'><span class="cm"> * answer you can make fairly good guess to find the correct letter. This since</span>
</span><span class='line'><span class="cm"> * the correct letter will have slightly longer execution time compared to the</span>
</span><span class='line'><span class="cm"> * ones with incorrect letters. Therefore loop over a-z and store the letter</span>
</span><span class='line'><span class="cm"> * that had longest running time when doing string compare. Repeat this for all</span>
</span><span class='line'><span class="cm"> * letters and then finally do a full string comparison to see whether we</span>
</span><span class='line'><span class="cm"> * guessed correct or not.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">bool</span> <span class="n">time_attack_pw</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">correct_pw</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>	<span class="n">bool</span> <span class="n">result</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>	<span class="kt">char</span> <span class="n">current_char</span><span class="p">;</span>
</span><span class='line'>	<span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>	<span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>	<span class="kt">uint64_t</span> <span class="n">current_time</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>	<span class="kt">uint64_t</span> <span class="n">max_time_found</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>	<span class="kt">char</span> <span class="o">*</span><span class="n">calculated_string</span> <span class="o">=</span> <span class="n">calloc</span><span class="p">(</span><span class="n">strlen</span><span class="p">(</span><span class="n">correct_pw</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">));</span>
</span><span class='line'>	<span class="n">calculated_string</span><span class="p">[</span><span class="n">strlen</span><span class="p">(</span><span class="n">calculated_string</span><span class="p">)]</span> <span class="o">=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>	<span class="cm">/* FIXME, why do we need to cut away one? rdtsc inaccuracy? */</span>
</span><span class='line'>	<span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">strlen</span><span class="p">(</span><span class="n">correct_pw</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>	<span class="p">{</span>
</span><span class='line'>		<span class="n">max_time_found</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>		<span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="sc">&#39;a&#39;</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="sc">&#39;z&#39;</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>		<span class="p">{</span>
</span><span class='line'>			<span class="n">current_char</span> <span class="o">=</span> <span class="n">j</span><span class="p">;</span>
</span><span class='line'>			<span class="n">current_time</span> <span class="o">=</span>
</span><span class='line'>				<span class="n">do_stat</span><span class="p">(</span><span class="n">correct_pw</span> <span class="o">+</span> <span class="n">i</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">current_char</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>			<span class="k">if</span> <span class="p">(</span><span class="n">current_time</span> <span class="o">&gt;</span> <span class="n">max_time_found</span><span class="p">)</span>
</span><span class='line'>			<span class="p">{</span>
</span><span class='line'>				<span class="n">max_time_found</span> <span class="o">=</span> <span class="n">current_time</span><span class="p">;</span>
</span><span class='line'>				<span class="cm">/*</span>
</span><span class='line'><span class="cm">				 * Store the letter that gave longest the</span>
</span><span class='line'><span class="cm">				 * response time for letter X in position i in</span>
</span><span class='line'><span class="cm">				 * the array where we store all guesses.</span>
</span><span class='line'><span class="cm">				 */</span>
</span><span class='line'>				<span class="n">calculated_string</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">j</span><span class="p">;</span>
</span><span class='line'>			<span class="p">}</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'>	<span class="n">dprintf</span><span class="p">(</span><span class="s">&quot;Guessed that pw should be: %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">calculated_string</span><span class="p">);</span>
</span><span class='line'>	<span class="cm">/*</span>
</span><span class='line'><span class="cm">	 * Check if the provided string completely matches the calculated</span>
</span><span class='line'><span class="cm">	 * string. Ignore the last space, see FIXME above.</span>
</span><span class='line'><span class="cm">	 */</span>
</span><span class='line'>	<span class="n">result</span> <span class="o">=</span> <span class="n">strncmp</span><span class="p">(</span><span class="n">correct_pw</span><span class="p">,</span> <span class="n">calculated_string</span><span class="p">,</span>
</span><span class='line'>			 <span class="n">strlen</span><span class="p">(</span><span class="n">correct_pw</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>	<span class="n">free</span><span class="p">(</span><span class="n">calculated_string</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>	<span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>	<span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>	<span class="kt">int</span> <span class="n">correct_guesses</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>	<span class="cm">/*</span>
</span><span class='line'><span class="cm">	 * FIXME, last char gives strange values, we add a space here, and strip</span>
</span><span class='line'><span class="cm">	 * it away in the time_attack_pw function. I suspect inaccurate rdtsc</span>
</span><span class='line'><span class="cm">	 * instruction.</span>
</span><span class='line'><span class="cm">	 */</span>
</span><span class='line'>	<span class="kt">char</span><span class="o">*</span> <span class="n">long_string</span> <span class="o">=</span> <span class="s">&quot;thisisalongstring &quot;</span><span class="p">;</span>
</span><span class='line'>	<span class="kt">char</span><span class="o">*</span> <span class="n">short_string</span> <span class="o">=</span> <span class="s">&quot;foo&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>	<span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="s">&quot;Shows a couple of examples of the time it takes to make string comparison&quot;</span><span class="p">);</span>
</span><span class='line'>	<span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">do_stat</span><span class="p">(</span><span class="n">long_string</span><span class="p">,</span> <span class="n">long_string</span><span class="p">,</span> <span class="s">&quot;avg time long string (thisisalongstring)&quot;</span><span class="p">);</span>
</span><span class='line'>	<span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">do_stat</span><span class="p">(</span><span class="n">short_string</span><span class="p">,</span> <span class="n">short_string</span><span class="p">,</span> <span class="s">&quot;avg time short string (foo)&quot;</span><span class="p">);</span>
</span><span class='line'>	<span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">do_stat</span><span class="p">(</span><span class="n">short_string</span><span class="p">,</span> <span class="s">&quot;XXX&quot;</span><span class="p">,</span> <span class="s">&quot;avg time 0 char correct (XXX/foo)&quot;</span><span class="p">);</span>
</span><span class='line'>	<span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">do_stat</span><span class="p">(</span><span class="n">short_string</span><span class="p">,</span> <span class="s">&quot;fXX&quot;</span><span class="p">,</span> <span class="s">&quot;avg time 1 char correct (fXX/foo)&quot;</span><span class="p">);</span>
</span><span class='line'>	<span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">do_stat</span><span class="p">(</span><span class="n">short_string</span><span class="p">,</span> <span class="s">&quot;foX&quot;</span><span class="p">,</span> <span class="s">&quot;avg time 2 char correct (foX/foo)&quot;</span><span class="p">);</span>
</span><span class='line'>	<span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">do_stat</span><span class="p">(</span><span class="n">short_string</span><span class="p">,</span> <span class="s">&quot;foo&quot;</span><span class="p">,</span> <span class="s">&quot;avg time 3 char correct (foo/foo)&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>	<span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>	<span class="p">{</span>
</span><span class='line'>		<span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">atoi</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>		<span class="p">{</span>
</span><span class='line'>			<span class="k">if</span> <span class="p">(</span><span class="n">time_attack_pw</span><span class="p">(</span><span class="n">long_string</span><span class="p">))</span>
</span><span class='line'>				<span class="n">correct_guesses</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>		<span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d successful timing attacks</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">correct_guesses</span><span class="p">);</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'>
</span><span class='line'>	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (Makefile)</span> <a href='/downloads/code/timing/Makefile'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'><span class="n">CC</span>     <span class="p">:=</span> <span class="n">gcc</span>
</span><span class='line'><span class="n">CFLAGS</span> <span class="p">:=</span> <span class="o">-</span><span class="n">O0</span> <span class="o">-</span><span class="n">g</span>
</span><span class='line'>
</span><span class='line'><span class="n">OBJS</span>   <span class="p">:=</span> <span class="n">time_attack_strcmp</span><span class="p">.</span><span class="n">o</span>
</span><span class='line'><span class="n">BIN</span>    <span class="p">:=</span> <span class="n">main</span>
</span><span class='line'>
</span><span class='line'><span class="n">ifdef</span> <span class="n">DEBUG</span>
</span><span class='line'><span class="n">CFLAGS</span> <span class="o">+</span><span class="p">=</span> <span class="o">-</span><span class="n">DDEBUG</span><span class="p">=</span>$<span class="p">(</span><span class="n">DEBUG</span><span class="p">)</span>
</span><span class='line'><span class="n">endif</span>
</span><span class='line'>
</span><span class='line'><span class="n">all</span><span class="p">:</span> $<span class="p">(</span><span class="n">BIN</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>$<span class="p">(</span><span class="n">BIN</span><span class="p">):</span> $<span class="p">(</span><span class="n">OBJS</span><span class="p">)</span>
</span><span class='line'>	$<span class="p">(</span><span class="n">CC</span><span class="p">)</span> $<span class="p">(</span><span class="n">CFLAGS</span><span class="p">)</span> <span class="o">-</span><span class="n">o</span> $<span class="p">@</span> $^
</span><span class='line'>
</span><span class='line'><span class="c">%.o: %.c</span>
</span><span class='line'>	$<span class="p">(</span><span class="n">CC</span><span class="p">)</span> <span class="o">-</span><span class="n">c</span> $<span class="p">(</span><span class="n">CFLAGS</span><span class="p">)</span> <span class="o">-</span><span class="n">o</span> $<span class="p">@</span> $<span class="o">&lt;</span>
</span><span class='line'>	<span class="p">@</span><span class="n">echo</span> &quot;  <span class="n">CC</span> $<span class="o">&lt;</span>&quot;
</span><span class='line'>
</span><span class='line'><span class="n">valgrind</span><span class="p">:</span>
</span><span class='line'>	<span class="n">valgrind</span> <span class="o">--</span><span class="n">tool</span><span class="p">=</span><span class="n">memcheck</span> <span class="o">--</span><span class="n">leak</span><span class="o">-</span><span class="n">check</span><span class="p">=</span><span class="n">full</span> <span class="o">--</span><span class="n">show</span><span class="o">-</span><span class="n">reachable</span><span class="p">=</span><span class="n">yes</span> <span class="o">./</span>$<span class="p">(</span><span class="n">BIN</span><span class="p">)</span> 10
</span><span class='line'>
</span><span class='line'><span class="n">clean</span><span class="p">:</span>
</span><span class='line'>	<span class="n">rm</span> <span class="o">-</span><span class="n">f</span> $<span class="p">(</span><span class="n">OBJS</span><span class="p">)</span> $<span class="p">(</span><span class="n">BIN</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apply Patches in Git]]></title>
    <link href="http://jyx.github.io/blog/2012/03/09/apply-patches-in-git/"/>
    <updated>2012-03-09T00:16:48+01:00</updated>
    <id>http://jyx.github.io/blog/2012/03/09/apply-patches-in-git</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/git/logo_git.gif">
One common task that a developer has to do sooner or later is to apply a patch
in Git. I have a simple scheme that I&rsquo;ve been using for a long time and it is
very seldom that I get into problem nowadays when I&rsquo;m doing patch work.</p>

<!-- more -->


<h3>The short version for the impatient</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git am &amp;lt; my_new_feature.patch
</span><span class='line'><span class="nv">$ </span>git apply &amp;mdash;reject &amp;mdash;whitespace<span class="o">=</span>fix my_new_feature.patch
</span><span class='line'><span class="nv">$ </span>git status
</span><span class='line'><span class="nv">$ </span>vim my_conflicting_file.c&lt;em&gt;
</span><span class='line'><span class="nv">$ </span>find . -name &amp;ldquo;&lt;/em&gt;.rej&amp;rdquo; -exec rm -f <span class="o">{}</span> <span class="se">\;</span>
</span><span class='line'><span class="nv">$ </span>git add .
</span><span class='line'><span class="nv">$ </span>git am &amp;mdash;resolved
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Long version for the one needing explanations to the steps</h3>

<p>To start with I always first try applying the patch with git am, i.e.</p>

<pre><code>$ git am &lt; my_new_feature.patch
</code></pre>

<p>Sometimes this is enough and the patch simply applies, however when it fails to
apply I just continue writing.</p>

<pre><code>$ git apply --reject --whitespace=fix my_new_feature.patch
</code></pre>

<p>This will force Git to apply as much as it can and for the rest of the hunks
that it cannot merge it will produce files ending with .rej. So the next step I
do after git apply is just to run</p>

<pre><code>$ git status
</code></pre>

<p>And notice the untracked files ending in .rej. Now I know what files Git
couldn&rsquo;t merge when applying the patch, so let&rsquo;s say that I have a file called
my_conflicting_file.c which Git couldn&rsquo;t merge. To solve this I open it in my
favorite editor by doing like this:</p>

<pre><code>$ vim my_conflicting_file.c*
</code></pre>

<p>This will open both my_conflicting_file.c and my_conflicting_file.c.rej. I will
split the window in vim (CTRL+W V), and then open the other file by typing :bp
in vim. Now it is up to you as a developer to decicde what changes in the <em>.rej
file should go into the conflicting file. I.e, what changes in
my_conflicting_file.c.rej, should be in my_conflicting_file.c. Sometimes you
will notice that you don&rsquo;t have to change anything at all and sometimes you will
notice that you have to add or remove lines in the conflicting file. Don&rsquo;t
forget to remove the + and/or &ndash; at the start of the lines in the </em>.rej file!
When this step is done I delete all the *.rej files and then add the changes
files to the index in Git. I.e:</p>

<pre><code>$ find . -name "*.rej" -exec rm -f {} \;
$ git add .
</code></pre>

<p>The last step you have to do before the patch have been merged is to tell git
that the &ldquo;am&rdquo; that you started have been resolved.</p>

<pre><code>$ git am --resolved
</code></pre>

<p>Patch work done! If you follow this scheme I&rsquo;m pretty sure that you will do fine
in the future when applying patches.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Perl Pack and Unpack]]></title>
    <link href="http://jyx.github.io/blog/2012/03/04/perl-pack-and-unpack/"/>
    <updated>2012-03-04T00:15:48+01:00</updated>
    <id>http://jyx.github.io/blog/2012/03/04/perl-pack-and-unpack</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/perlpap/logo_perl.jpg">
When you have to read and write binary data using Perl, then you preferably use
the built in functions pack and unpack. With the pack function you will create
a string which will be different depending on what kind of template you provide
to the pack function (the unpack does the same, but in the opposite direction).</p>

<!-- more -->


<p>I was writing a simple Perl script that was reading a binary file which
contained data that originated from a c struct. I.e, I wanted to parse the
binary file and print what the values would be if the binary file was read into
the c struct.</p>

<p>Let&rsquo;s say that the struct is on the format:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">binary_data</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">uint32_t</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'><span class="kt">uint32_t</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="kt">uint8_t</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I.e, we have data consisting of 4 bytes for &ldquo;a&rdquo;, 4 bytes for &ldquo;b&rdquo; and 1 byte for
&ldquo;c&rdquo;. Let us say that the binary files consist of the following values</p>

<pre><code>a = 196 dec (0xC4 hex)
b = 4293844428 dec (0xFFEEDDCC hex)
c = 75 dec (0x4B hex)
</code></pre>

<p>then our binary file, &ldquo;binary_data.bin&rdquo; would contain this:</p>

<pre><code>"c4 00 00 00 cc dd ee ff 4b"
</code></pre>

<p>To be able to read this back and print the values in decimal or hex, you simply
start by reading the size of each element in the struct one by one and for each
item you unpack the data according to the size of the element in the struct.
For uint32_t you use &ldquo;L&rdquo; and for uint8_t &ldquo;C&rdquo;. A complete listing of the
different templates (as they are called in Perl) could be found here. Be
careful about little- vs big-endian when you select template.</p>

<p>Below is a Perl script that both create the binary file, then read the data
back from the file and print the values both in decimal and hex.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="sr">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;</span><span class="o">!</span><span class="sr">/usr/</span><span class="n">bin</span><span class="sr">/perl&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span><span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">warnings</span><span class="p">;</span><span class="sr">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span><span class="nb">binmode</span> <span class="n">FILE</span><span class="p">;</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$buf</span><span class="p">;</span><span class="sr">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;</span><span class="n">Write</span> <span class="n">decimal</span> <span class="nb">values</span> <span class="n">as</span> <span class="n">binary</span> <span class="n">data</span><span class="o">.</span><span class="sr">&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span><span class="nb">open</span> <span class="n">FILE</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&gt;</span><span class="n">binary_data</span><span class="o">.</span><span class="n">bin</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="ow">or</span> <span class="nb">die</span> <span class="vg">$!</span><span class="p">;</span><span class="sr">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span><span class="k">my</span> <span class="nv">$data</span> <span class="o">=</span> <span class="nb">pack</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">L</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="mi">196</span><span class="p">;</span>
</span><span class='line'><span class="k">print</span> <span class="n">FILE</span> <span class="nv">$data</span><span class="p">;</span><span class="sr">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span><span class="nv">$data</span> <span class="o">=</span> <span class="nb">pack</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">L</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="mi">4293844428</span><span class="p">;</span>
</span><span class='line'><span class="k">print</span> <span class="n">FILE</span> <span class="nv">$data</span><span class="p">;</span><span class="sr">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span><span class="nv">$data</span> <span class="o">=</span> <span class="nb">pack</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">C</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="mi">75</span><span class="p">;</span>
</span><span class='line'><span class="k">print</span> <span class="n">FILE</span> <span class="nv">$data</span><span class="p">;</span><span class="sr">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span><span class="nb">close</span> <span class="n">FILE</span><span class="p">;</span><span class="sr">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;</span><span class="n">Read</span> <span class="n">back</span> <span class="n">binary</span> <span class="n">data</span> <span class="n">to</span> <span class="n">decimal</span> <span class="n">value</span><span class="o">.</span><span class="sr">&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span><span class="nb">open</span> <span class="n">FILE</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">binary_data</span><span class="o">.</span><span class="n">bin</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="ow">or</span> <span class="nb">die</span> <span class="vg">$!</span><span class="p">;</span><span class="sr">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span><span class="nb">read</span> <span class="n">FILE</span><span class="p">,</span> <span class="nv">$buf</span><span class="p">,</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'><span class="nv">$data</span> <span class="o">=</span> <span class="nb">unpack</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">L</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="nv">$buf</span><span class="p">;</span>
</span><span class='line'><span class="k">print</span> <span class="nv">$data</span> <span class="o">.</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">.</span> <span class="nb">sprintf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nv">%x</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="nv">$data</span><span class="p">)</span> <span class="o">.</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;;</span><span class="sr">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span><span class="nb">read</span> <span class="n">FILE</span><span class="p">,</span> <span class="nv">$buf</span><span class="p">,</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'><span class="nv">$data</span> <span class="o">=</span> <span class="nb">unpack</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">L</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="nv">$buf</span><span class="p">;</span>
</span><span class='line'><span class="k">print</span> <span class="nv">$data</span> <span class="o">.</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">.</span> <span class="nb">sprintf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nv">%x</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="nv">$data</span><span class="p">)</span> <span class="o">.</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;;</span><span class="sr">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span><span class="nb">read</span> <span class="n">FILE</span><span class="p">,</span> <span class="nv">$buf</span><span class="p">,</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="nv">$data</span> <span class="o">=</span> <span class="nb">unpack</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">C</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="nv">$buf</span><span class="p">;</span>
</span><span class='line'><span class="k">print</span> <span class="nv">$data</span> <span class="o">.</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">.</span> <span class="nb">sprintf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nv">%x</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="nv">$data</span><span class="p">)</span> <span class="o">.</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;;</span><span class="sr">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span><span class="nb">close</span> <span class="n">FILE</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Libcurl With Minimal Dependencies]]></title>
    <link href="http://jyx.github.io/blog/2010/08/05/using-libcurl-with-minimal-dependencies/"/>
    <updated>2010-08-05T01:13:15+02:00</updated>
    <id>http://jyx.github.io/blog/2010/08/05/using-libcurl-with-minimal-dependencies</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/libcurldep/logo_curl-200x150.jpg">
For an ongoing project I needed to retrieve webpages from my C-program and
first I used sockets directly, but then I thought why not try use libcurl? If I
could use libcurl and link it statically then I would get the good features
from libcurl, but still could make my application stand alone.</p>

<!-- more -->


<p>With my current setup running Debian (Lenny), I tried to just apt-get the libraries
(libcurl4-openssl-dev) and build using those libraries That went fine until I
tried to link them statically with my application. After reading different mail
archives, forum and tried on my own I got my application to link (static) with
libcurl. Basically what I needed to do was.</p>

<ul>
<li>Download libcurl source</li>
<li>Compile libcurl myself (disable one define, more about that below).</li>
<li>Point to my own built libcurl.a library when building my own application.</li>
</ul>


<p>So to save some headache for myself next time I want to do it or for someone
else reading this I&rsquo;ve listed the steps I had to do to get this to work.</p>

<h3>Download libcurl source</h3>

<p>As of writing this, the latest version of libcurl was 7.21.0 so I downloaded
and unpacked the source.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wget &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;http://curl.haxx.se/download/curl-7.21.0.tar.bz2&quot;</span>&gt;http://curl.haxx.se/download/curl-7.21.0.tar.bz2&lt;/a&gt;
</span><span class='line'>tar xjvf curl-7.21.0.tar.bz2
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Compile libcurl</h3>

<p>Next it was time to run ./configure and make. Here I basically disabled
everything for libcurl except HTTP and FILE.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./configure &amp;mdash;prefix<span class="o">=</span><span class="nv">$HOME</span>/devel/libcurl &amp;mdash;disable-dict &amp;mdash;disable-ftp &amp;mdash;disable-imap &amp;mdash;disable-ldap &amp;mdash;disable-ldaps &amp;mdash;disable-pop3 &amp;mdash;disable-proxy &amp;mdash;disable-rtsp &amp;mdash;disable-shared &amp;mdash;disable-smtp &amp;mdash;disable-telnet &amp;mdash;disable-tftp &amp;mdash;disable-zlib &amp;mdash;without-ca-bundle &amp;mdash;without-gnutls &amp;mdash;without-libidn &amp;mdash;without-librtmp &amp;mdash;without-libssh2 &amp;mdash;without-nss &amp;mdash;without-ssl &amp;mdash;without-zlib
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Edit the file lib/curl_config.h which is generated during the configure step.
In this file we uncomment the line saying</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">Define</span> <span class="n">to</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">you</span> <span class="n">have</span> <span class="n">the</span> <span class="n">clock_gettime</span> <span class="n">function</span> <span class="n">and</span> <span class="n">monotonic</span> <span class="n">timer</span><span class="p">.</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="c1">//#define HAVE_CLOCK_GETTIME_MONOTONIC 1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If I didn&rsquo;t do this, then I would have a dependency to librt which I didn&rsquo;t want to.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>make
</span><span class='line'>make install
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now I was done with libcurl, next I should use this library in my application.</p>

<h3>Build the application using libcurl</h3>

<p>To make things simple when describing this I instead use the file
<a href="http://curl.haxx.se/libcurl/c/simple.html">simple.c</a>
which is found on <a href="http://curl.haxx.se/libcurl">libcurl&rsquo;s</a> site.</p>

<p>In <a href="/downloads/libcurldep/simple_libcurl.tar.gz">simple_libcurl.tar.gz</a> I&rsquo;ve
put together the source and a Makefile which builds using the library just
created. The magick is the LDFLAGS line used in the linking step on line 12 and
24 below. I.e. on line 12 I had have to point the the folder where the library
is located that I had built myself (-L/path/to/my/libcurl.a) and I still needed
to tell the linker that I wanted to use libcurl, hence the -lcurl parameter.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='make'><span class='line'><span class="nv">SRCDIR</span>  <span class="o">:=</span> src
</span><span class='line'><span class="nv">OBJDIR</span>  <span class="o">:=</span> obj
</span><span class='line'><span class="nv">SRC</span>     <span class="o">:=</span> <span class="k">$(</span>patsubst <span class="k">$(</span>SRCDIR<span class="k">)</span>/%.c, %.c, <span class="k">$(</span>wildcard <span class="k">$(</span>SRCDIR<span class="k">)</span>/*.c<span class="k">))</span>
</span><span class='line'><span class="nv">OBJS</span>    <span class="o">:=</span> <span class="k">$(</span>addprefix <span class="k">$(</span>OBJDIR<span class="k">)</span>/, <span class="k">$(</span>patsubst %.c, %.o, <span class="k">$(</span>SRC<span class="k">)))</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'><span class="nf">&lt;p&gt;INCDIR  </span><span class="o">:</span><span class="m">= inc&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nf">&lt;p&gt;CC      </span><span class="o">:</span><span class="m">= gcc</span>
</span><span class='line'><span class="nv">CFLAGS</span>  <span class="o">+=</span> <span class="k">$(</span>addprefix -I, <span class="k">$(</span>INCDIR<span class="k">))</span>
</span><span class='line'><span class="nv">CFLAGS</span>  <span class="o">+=</span> -I/home/jyx/devel/libcurl/include&lt;/p&gt;
</span><span class='line'>
</span><span class='line'><span class="nf">&lt;p&gt;LDFLAGS </span><span class="o">:</span><span class="m">= -L/home/jyx/devel/libcurl/lib -lcurl&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nf">&lt;p&gt;.PHONY </span><span class="o">:</span> <span class="m">all clean&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nf">&lt;p&gt;all</span><span class="o">:</span> <span class="m">main&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nf">&lt;p&gt;$(OBJDIR)/%.o</span><span class="o">:</span> <span class="m">$(SRCDIR)/%.c&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;pre&gt;&lt;code&gt;@echo</span> <span class="s2">&quot; (CC)    $&amp;lt;&quot;</span>
</span><span class='line'><span class="err">@</span><span class="k">$(</span>CC<span class="k">)</span> <span class="k">$(</span>CFLAGS<span class="k">)</span> -c <span class="nv">$&amp;</span>lt; -o <span class="nv">$@</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;main: <span class="k">$(</span>OBJS<span class="k">)</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;@echo <span class="s2">&quot;Create binary: $@&quot;</span>
</span><span class='line'>@<span class="k">$(</span>CC<span class="k">)</span> -o main <span class="nv">$+</span> <span class="k">$(</span>LDFLAGS<span class="k">)</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;clean:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;rm -f <span class="k">$(</span>OBJDIR<span class="k">)</span>/* main
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>When this is achieved, then you have a quite clean binary when it comes to
dependencies. In the example code in simple_libcurl I now have these
dependencies on a machine running Debian (Lenny).</p>

<pre><code>$ ldd main
    linux-vdso.so.1 =&gt;  (0x00007f157db66000)
    libc.so.6 =&gt; /lib/libc.so.6 (0x00007f157d5f9000)
    /lib64/ld-linux-x86-64.so.2 (0x00007f157d94c000)
</code></pre>

<p>Have fun with libcurl!</p>
]]></content>
  </entry>
  
</feed>
