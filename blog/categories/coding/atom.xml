<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Coding | joakimbech.com]]></title>
  <link href="http://jyx.github.io/blog/categories/coding/atom.xml" rel="self"/>
  <link href="http://jyx.github.io/"/>
  <updated>2014-01-02T08:25:17+01:00</updated>
  <id>http://jyx.github.io/</id>
  <author>
    <name><![CDATA[Joakim Bech]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Apply Patches in Git]]></title>
    <link href="http://jyx.github.io/blog/2012/03/09/apply-patches-in-git/"/>
    <updated>2012-03-09T00:16:48+01:00</updated>
    <id>http://jyx.github.io/blog/2012/03/09/apply-patches-in-git</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/git/logo_git.gif">
One common task that a developer has to do sooner or later is to apply a patch
in Git. I have a simple scheme that I&rsquo;ve been using for a long time and it is
very seldom that I get into problem nowadays when I&rsquo;m doing patch work.</p>

<!-- more -->


<h3>The short version for the impatient</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git am &amp;lt; my_new_feature.patch
</span><span class='line'><span class="nv">$ </span>git apply &amp;mdash;reject &amp;mdash;whitespace<span class="o">=</span>fix my_new_feature.patch
</span><span class='line'><span class="nv">$ </span>git status
</span><span class='line'><span class="nv">$ </span>vim my_conflicting_file.c&lt;em&gt;
</span><span class='line'><span class="nv">$ </span>find . -name &amp;ldquo;&lt;/em&gt;.rej&amp;rdquo; -exec rm -f <span class="o">{}</span> <span class="se">\;</span>
</span><span class='line'><span class="nv">$ </span>git add .
</span><span class='line'><span class="nv">$ </span>git am &amp;mdash;resolved
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Long version for the one needing explanations to the steps</h3>

<p>To start with I always first try applying the patch with git am, i.e.</p>

<pre><code>$ git am &lt; my_new_feature.patch
</code></pre>

<p>Sometimes this is enough and the patch simply applies, however when it fails to
apply I just continue writing.</p>

<pre><code>$ git apply --reject --whitespace=fix my_new_feature.patch
</code></pre>

<p>This will force Git to apply as much as it can and for the rest of the hunks
that it cannot merge it will produce files ending with .rej. So the next step I
do after git apply is just to run</p>

<pre><code>$ git status
</code></pre>

<p>And notice the untracked files ending in .rej. Now I know what files Git
couldn&rsquo;t merge when applying the patch, so let&rsquo;s say that I have a file called
my_conflicting_file.c which Git couldn&rsquo;t merge. To solve this I open it in my
favorite editor by doing like this:</p>

<pre><code>$ vim my_conflicting_file.c*
</code></pre>

<p>This will open both my_conflicting_file.c and my_conflicting_file.c.rej. I will
split the window in vim (CTRL+W V), and then open the other file by typing :bp
in vim. Now it is up to you as a developer to decicde what changes in the <em>.rej
file should go into the conflicting file. I.e, what changes in
my_conflicting_file.c.rej, should be in my_conflicting_file.c. Sometimes you
will notice that you don&rsquo;t have to change anything at all and sometimes you will
notice that you have to add or remove lines in the conflicting file. Don&rsquo;t
forget to remove the + and/or &ndash; at the start of the lines in the </em>.rej file!
When this step is done I delete all the *.rej files and then add the changes
files to the index in Git. I.e:</p>

<pre><code>$ find . -name "*.rej" -exec rm -f {} \;
$ git add .
</code></pre>

<p>The last step you have to do before the patch have been merged is to tell git
that the &ldquo;am&rdquo; that you started have been resolved.</p>

<pre><code>$ git am --resolved
</code></pre>

<p>Patch work done! If you follow this scheme I&rsquo;m pretty sure that you will do fine
in the future when applying patches.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Perl Pack and Unpack]]></title>
    <link href="http://jyx.github.io/blog/2012/03/04/perl-pack-and-unpack/"/>
    <updated>2012-03-04T00:15:48+01:00</updated>
    <id>http://jyx.github.io/blog/2012/03/04/perl-pack-and-unpack</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/perlpap/logo_perl.jpg">
When you have to read and write binary data using Perl, then you preferably use
the built in functions pack and unpack. With the pack function you will create
a string which will be different depending on what kind of template you provide
to the pack function (the unpack does the same, but in the opposite direction).</p>

<!-- more -->


<p>I was writing a simple Perl script that was reading a binary file which
contained data that originated from a c struct. I.e, I wanted to parse the
binary file and print what the values would be if the binary file was read into
the c struct.</p>

<p>Let&rsquo;s say that the struct is on the format:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">binary_data</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">uint32_t</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'><span class="kt">uint32_t</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="kt">uint8_t</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I.e, we have data consisting of 4 bytes for &ldquo;a&rdquo;, 4 bytes for &ldquo;b&rdquo; and 1 byte for
&ldquo;c&rdquo;. Let us say that the binary files consist of the following values</p>

<pre><code>a = 196 dec (0xC4 hex)
b = 4293844428 dec (0xFFEEDDCC hex)
c = 75 dec (0x4B hex)
</code></pre>

<p>then our binary file, &ldquo;binary_data.bin&rdquo; would contain this:</p>

<pre><code>"c4 00 00 00 cc dd ee ff 4b"
</code></pre>

<p>To be able to read this back and print the values in decimal or hex, you simply
start by reading the size of each element in the struct one by one and for each
item you unpack the data according to the size of the element in the struct.
For uint32_t you use &ldquo;L&rdquo; and for uint8_t &ldquo;C&rdquo;. A complete listing of the
different templates (as they are called in Perl) could be found here. Be
careful about little- vs big-endian when you select template.</p>

<p>Below is a Perl script that both create the binary file, then read the data
back from the file and print the values both in decimal and hex.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="sr">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;</span><span class="o">!</span><span class="sr">/usr/</span><span class="n">bin</span><span class="sr">/perl&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span><span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">warnings</span><span class="p">;</span><span class="sr">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span><span class="nb">binmode</span> <span class="n">FILE</span><span class="p">;</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$buf</span><span class="p">;</span><span class="sr">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;</span><span class="n">Write</span> <span class="n">decimal</span> <span class="nb">values</span> <span class="n">as</span> <span class="n">binary</span> <span class="n">data</span><span class="o">.</span><span class="sr">&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span><span class="nb">open</span> <span class="n">FILE</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&gt;</span><span class="n">binary_data</span><span class="o">.</span><span class="n">bin</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="ow">or</span> <span class="nb">die</span> <span class="vg">$!</span><span class="p">;</span><span class="sr">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span><span class="k">my</span> <span class="nv">$data</span> <span class="o">=</span> <span class="nb">pack</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">L</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="mi">196</span><span class="p">;</span>
</span><span class='line'><span class="k">print</span> <span class="n">FILE</span> <span class="nv">$data</span><span class="p">;</span><span class="sr">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span><span class="nv">$data</span> <span class="o">=</span> <span class="nb">pack</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">L</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="mi">4293844428</span><span class="p">;</span>
</span><span class='line'><span class="k">print</span> <span class="n">FILE</span> <span class="nv">$data</span><span class="p">;</span><span class="sr">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span><span class="nv">$data</span> <span class="o">=</span> <span class="nb">pack</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">C</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="mi">75</span><span class="p">;</span>
</span><span class='line'><span class="k">print</span> <span class="n">FILE</span> <span class="nv">$data</span><span class="p">;</span><span class="sr">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span><span class="nb">close</span> <span class="n">FILE</span><span class="p">;</span><span class="sr">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;</span><span class="n">Read</span> <span class="n">back</span> <span class="n">binary</span> <span class="n">data</span> <span class="n">to</span> <span class="n">decimal</span> <span class="n">value</span><span class="o">.</span><span class="sr">&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span><span class="nb">open</span> <span class="n">FILE</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">binary_data</span><span class="o">.</span><span class="n">bin</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="ow">or</span> <span class="nb">die</span> <span class="vg">$!</span><span class="p">;</span><span class="sr">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span><span class="nb">read</span> <span class="n">FILE</span><span class="p">,</span> <span class="nv">$buf</span><span class="p">,</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'><span class="nv">$data</span> <span class="o">=</span> <span class="nb">unpack</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">L</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="nv">$buf</span><span class="p">;</span>
</span><span class='line'><span class="k">print</span> <span class="nv">$data</span> <span class="o">.</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">.</span> <span class="nb">sprintf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nv">%x</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="nv">$data</span><span class="p">)</span> <span class="o">.</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;;</span><span class="sr">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span><span class="nb">read</span> <span class="n">FILE</span><span class="p">,</span> <span class="nv">$buf</span><span class="p">,</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'><span class="nv">$data</span> <span class="o">=</span> <span class="nb">unpack</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">L</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="nv">$buf</span><span class="p">;</span>
</span><span class='line'><span class="k">print</span> <span class="nv">$data</span> <span class="o">.</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">.</span> <span class="nb">sprintf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nv">%x</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="nv">$data</span><span class="p">)</span> <span class="o">.</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;;</span><span class="sr">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span><span class="nb">read</span> <span class="n">FILE</span><span class="p">,</span> <span class="nv">$buf</span><span class="p">,</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="nv">$data</span> <span class="o">=</span> <span class="nb">unpack</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">C</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="nv">$buf</span><span class="p">;</span>
</span><span class='line'><span class="k">print</span> <span class="nv">$data</span> <span class="o">.</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">.</span> <span class="nb">sprintf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nv">%x</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="nv">$data</span><span class="p">)</span> <span class="o">.</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;;</span><span class="sr">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span><span class="nb">close</span> <span class="n">FILE</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Libcurl With Minimal Dependencies]]></title>
    <link href="http://jyx.github.io/blog/2010/08/05/using-libcurl-with-minimal-dependencies/"/>
    <updated>2010-08-05T01:13:15+02:00</updated>
    <id>http://jyx.github.io/blog/2010/08/05/using-libcurl-with-minimal-dependencies</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/libcurldep/logo_curl-200x150.jpg">
For an ongoing project I needed to retrieve webpages from my C-program and
first I used sockets directly, but then I thought why not try use libcurl? If I
could use libcurl and link it statically then I would get the good features
from libcurl, but still could make my application stand alone.</p>

<!-- more -->


<p>With my current setup running Debian (Lenny), I tried to just apt-get the libraries
(libcurl4-openssl-dev) and build using those libraries That went fine until I
tried to link them statically with my application. After reading different mail
archives, forum and tried on my own I got my application to link (static) with
libcurl. Basically what I needed to do was.</p>

<ul>
<li>Download libcurl source</li>
<li>Compile libcurl myself (disable one define, more about that below).</li>
<li>Point to my own built libcurl.a library when building my own application.</li>
</ul>


<p>So to save some headache for myself next time I want to do it or for someone
else reading this I&rsquo;ve listed the steps I had to do to get this to work.</p>

<h3>Download libcurl source</h3>

<p>As of writing this, the latest version of libcurl was 7.21.0 so I downloaded
and unpacked the source.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wget &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;http://curl.haxx.se/download/curl-7.21.0.tar.bz2&quot;</span>&gt;http://curl.haxx.se/download/curl-7.21.0.tar.bz2&lt;/a&gt;
</span><span class='line'>tar xjvf curl-7.21.0.tar.bz2
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Compile libcurl</h3>

<p>Next it was time to run ./configure and make. Here I basically disabled
everything for libcurl except HTTP and FILE.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./configure &amp;mdash;prefix<span class="o">=</span><span class="nv">$HOME</span>/devel/libcurl &amp;mdash;disable-dict &amp;mdash;disable-ftp &amp;mdash;disable-imap &amp;mdash;disable-ldap &amp;mdash;disable-ldaps &amp;mdash;disable-pop3 &amp;mdash;disable-proxy &amp;mdash;disable-rtsp &amp;mdash;disable-shared &amp;mdash;disable-smtp &amp;mdash;disable-telnet &amp;mdash;disable-tftp &amp;mdash;disable-zlib &amp;mdash;without-ca-bundle &amp;mdash;without-gnutls &amp;mdash;without-libidn &amp;mdash;without-librtmp &amp;mdash;without-libssh2 &amp;mdash;without-nss &amp;mdash;without-ssl &amp;mdash;without-zlib
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Edit the file lib/curl_config.h which is generated during the configure step.
In this file we uncomment the line saying</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">Define</span> <span class="n">to</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">you</span> <span class="n">have</span> <span class="n">the</span> <span class="n">clock_gettime</span> <span class="n">function</span> <span class="n">and</span> <span class="n">monotonic</span> <span class="n">timer</span><span class="p">.</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="c1">//#define HAVE_CLOCK_GETTIME_MONOTONIC 1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If I didn&rsquo;t do this, then I would have a dependency to librt which I didn&rsquo;t want to.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>make
</span><span class='line'>make install
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now I was done with libcurl, next I should use this library in my application.</p>

<h3>Build the application using libcurl</h3>

<p>To make things simple when describing this I instead use the file
<a href="http://curl.haxx.se/libcurl/c/simple.html">simple.c</a>
which is found on <a href="http://curl.haxx.se/libcurl">libcurl&rsquo;s</a> site.</p>

<p>In <a href="/downloads/libcurldep/simple_libcurl.tar.gz">simple_libcurl.tar.gz</a> I&rsquo;ve
put together the source and a Makefile which builds using the library just
created. The magick is the LDFLAGS line used in the linking step on line 12 and
24 below. I.e. on line 12 I had have to point the the folder where the library
is located that I had built myself (-L/path/to/my/libcurl.a) and I still needed
to tell the linker that I wanted to use libcurl, hence the -lcurl parameter.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='make'><span class='line'><span class="nv">SRCDIR</span>  <span class="o">:=</span> src
</span><span class='line'><span class="nv">OBJDIR</span>  <span class="o">:=</span> obj
</span><span class='line'><span class="nv">SRC</span>     <span class="o">:=</span> <span class="k">$(</span>patsubst <span class="k">$(</span>SRCDIR<span class="k">)</span>/%.c, %.c, <span class="k">$(</span>wildcard <span class="k">$(</span>SRCDIR<span class="k">)</span>/*.c<span class="k">))</span>
</span><span class='line'><span class="nv">OBJS</span>    <span class="o">:=</span> <span class="k">$(</span>addprefix <span class="k">$(</span>OBJDIR<span class="k">)</span>/, <span class="k">$(</span>patsubst %.c, %.o, <span class="k">$(</span>SRC<span class="k">)))</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'><span class="nf">&lt;p&gt;INCDIR  </span><span class="o">:</span><span class="m">= inc&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nf">&lt;p&gt;CC      </span><span class="o">:</span><span class="m">= gcc</span>
</span><span class='line'><span class="nv">CFLAGS</span>  <span class="o">+=</span> <span class="k">$(</span>addprefix -I, <span class="k">$(</span>INCDIR<span class="k">))</span>
</span><span class='line'><span class="nv">CFLAGS</span>  <span class="o">+=</span> -I/home/jyx/devel/libcurl/include&lt;/p&gt;
</span><span class='line'>
</span><span class='line'><span class="nf">&lt;p&gt;LDFLAGS </span><span class="o">:</span><span class="m">= -L/home/jyx/devel/libcurl/lib -lcurl&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nf">&lt;p&gt;.PHONY </span><span class="o">:</span> <span class="m">all clean&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nf">&lt;p&gt;all</span><span class="o">:</span> <span class="m">main&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nf">&lt;p&gt;$(OBJDIR)/%.o</span><span class="o">:</span> <span class="m">$(SRCDIR)/%.c&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;pre&gt;&lt;code&gt;@echo</span> <span class="s2">&quot; (CC)    $&amp;lt;&quot;</span>
</span><span class='line'><span class="err">@</span><span class="k">$(</span>CC<span class="k">)</span> <span class="k">$(</span>CFLAGS<span class="k">)</span> -c <span class="nv">$&amp;</span>lt; -o <span class="nv">$@</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;main: <span class="k">$(</span>OBJS<span class="k">)</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;@echo <span class="s2">&quot;Create binary: $@&quot;</span>
</span><span class='line'>@<span class="k">$(</span>CC<span class="k">)</span> -o main <span class="nv">$+</span> <span class="k">$(</span>LDFLAGS<span class="k">)</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;clean:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;rm -f <span class="k">$(</span>OBJDIR<span class="k">)</span>/* main
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>When this is achieved, then you have a quite clean binary when it comes to
dependencies. In the example code in simple_libcurl I now have these
dependencies on a machine running Debian (Lenny).</p>

<pre><code>$ ldd main
    linux-vdso.so.1 =&gt;  (0x00007f157db66000)
    libc.so.6 =&gt; /lib/libc.so.6 (0x00007f157d5f9000)
    /lib64/ld-linux-x86-64.so.2 (0x00007f157d94c000)
</code></pre>

<p>Have fun with libcurl!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Coming iPhone Application]]></title>
    <link href="http://jyx.github.io/blog/2010/04/25/my-coming-iphone-application/"/>
    <updated>2010-04-25T01:11:17+02:00</updated>
    <id>http://jyx.github.io/blog/2010/04/25/my-coming-iphone-application</id>
    <content type="html"><![CDATA[<p>I just want to show an early screenshot of my coming iPhone application that
I&rsquo;m currently is writing. I do not want to say to much about what purpose it
should fulfill, but it&rsquo;s kind of a maths / algorithm / practice application.
Below is screenshot of how it (most likely) will look.</p>

<!-- more -->


<p><img src="/images/iphonebd//bd_preview.jpg"></p>
]]></content>
  </entry>
  
</feed>
