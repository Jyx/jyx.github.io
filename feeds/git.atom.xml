<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>joakimbech.com - Git</title><link href="https://jyx.github.io/" rel="alternate"></link><link href="https://jyx.github.io/feeds/git.atom.xml" rel="self"></link><id>https://jyx.github.io/</id><updated>2018-08-18T00:00:00+02:00</updated><entry><title>Apply patches in Git</title><link href="https://jyx.github.io/apply-patches-in-git.html" rel="alternate"></link><published>2012-03-09T00:16:48+01:00</published><updated>2018-08-18T00:00:00+02:00</updated><author><name>Joakim Bech</name></author><id>tag:jyx.github.io,2012-03-09:/apply-patches-in-git.html</id><summary type="html">&lt;p&gt;&lt;img alt="git logo" src="https://jyx.github.io/images/git/logo_git.gif" align="right"&gt;
A common task for a developer has is to apply a patch in Git. I have a simple
scheme that I've been using for a long time and it is very seldom that I get
into problem nowadays when I'm doing patch work.&lt;/p&gt;
&lt;h1&gt;The short version for the impatient&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git am &amp;lt; my_new_feature.patch
$ git apply --reject --whitespace&lt;span class="o"&gt;=&lt;/span&gt;fix my_new_feature.patch
$ git status
$ vim my_conflicting_file.c*
$ find . -name &lt;span class="s2"&gt;&amp;quot;*.rej&amp;quot;&lt;/span&gt; -exec rm -f &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="se"&gt;\;&lt;/span&gt;
$ git add .
$ git am --resolved
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Long version for the â€¦&lt;/h1&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="git logo" src="https://jyx.github.io/images/git/logo_git.gif" align="right"&gt;
A common task for a developer has is to apply a patch in Git. I have a simple
scheme that I've been using for a long time and it is very seldom that I get
into problem nowadays when I'm doing patch work.&lt;/p&gt;
&lt;h1&gt;The short version for the impatient&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git am &amp;lt; my_new_feature.patch
$ git apply --reject --whitespace&lt;span class="o"&gt;=&lt;/span&gt;fix my_new_feature.patch
$ git status
$ vim my_conflicting_file.c*
$ find . -name &lt;span class="s2"&gt;&amp;quot;*.rej&amp;quot;&lt;/span&gt; -exec rm -f &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="se"&gt;\;&lt;/span&gt;
$ git add .
$ git am --resolved
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Long version for the one needing explanations to the steps&lt;/h1&gt;
&lt;p&gt;To start with I always first try applying the patch with git am, i.e.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git am &amp;lt; my_new_feature.patch
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Sometimes this is enough and the patch simply applies, however when it fails to
apply I just continue writing.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git apply --reject --whitespace&lt;span class="o"&gt;=&lt;/span&gt;fix my_new_feature.patch
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will force Git to apply as much as it can and for the rest of the hunks
that it cannot merge it will produce files ending with .rej. So the next step I
do after git apply is just to run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git status
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And notice the untracked files ending in .rej. Now I know what files Git
couldn't merge when applying the patch, so let's say that I have a file called
my_conflicting_file.c which Git couldn't merge. To solve this I open it in my
favorite editor by doing like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vim my_conflicting_file.c*
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will open both my_conflicting_file.c and my_conflicting_file.c.rej. I will
split the window in vim (CTRL+W V), and then open the other file by typing :bp
in vim. Now it is up to you as a developer to decicde what changes in the &lt;em&gt;.rej
file should go into the conflicting file. I.e, what changes in
my_conflicting_file.c.rej, should be in my_conflicting_file.c. Sometimes you
will notice that you don't have to change anything at all and sometimes you will
notice that you have to add or remove lines in the conflicting file. Don't
forget to remove the + and/or - at the start of the lines in the &lt;/em&gt;.rej file!
When this step is done I delete all the *.rej files and then add the changes
files to the index in Git. I.e:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ find . -name &lt;span class="s2"&gt;&amp;quot;*.rej&amp;quot;&lt;/span&gt; -exec rm -f &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="se"&gt;\;&lt;/span&gt;
$ git add .
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The last step you have to do before the patch have been merged is to tell git
that the "am" that you started have been resolved.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git am --resolved
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Patch work done! If you follow this scheme I'm pretty sure that you will do fine
in the future when applying patches.&lt;/p&gt;</content><category term="Git"></category></entry></feed>