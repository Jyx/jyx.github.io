<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>joakimbech.com - Hacking</title><link href="https://jyx.github.io/" rel="alternate"></link><link href="https://jyx.github.io/feeds/hacking.atom.xml" rel="self"></link><id>https://jyx.github.io/</id><updated>2018-08-19T00:00:00+02:00</updated><entry><title>Sibylla - Unlimited discount coupons</title><link href="https://jyx.github.io/blog/2018/08/19/sibylla-unlimited-discount-coupons/" rel="alternate"></link><published>2018-08-19T00:00:00+02:00</published><updated>2018-08-19T00:00:00+02:00</updated><author><name>Joakim Bech</name></author><id>tag:jyx.github.io,2018-08-19:/blog/2018/08/19/sibylla-unlimited-discount-coupons/</id><summary type="html">&lt;h1&gt;tl;dr&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;The Sibylla app uses plain &lt;code&gt;HTTP&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Not any verification of email used when logging into the app.&lt;/li&gt;
&lt;li&gt;The Sibylla server stores whether a coupon has been consumed or not for a
  certain email address.&lt;/li&gt;
&lt;li&gt;The app doesn't use the stored information at the server to decide whether a
  coupon has been used or not for a certain email.&lt;/li&gt;
&lt;li&gt;The "consumed" value seems to be stored locally in the app.&lt;/li&gt;
&lt;li&gt;Wiping the data/cache in Android's app settings will …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h1&gt;tl;dr&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;The Sibylla app uses plain &lt;code&gt;HTTP&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Not any verification of email used when logging into the app.&lt;/li&gt;
&lt;li&gt;The Sibylla server stores whether a coupon has been consumed or not for a
  certain email address.&lt;/li&gt;
&lt;li&gt;The app doesn't use the stored information at the server to decide whether a
  coupon has been used or not for a certain email.&lt;/li&gt;
&lt;li&gt;The "consumed" value seems to be stored locally in the app.&lt;/li&gt;
&lt;li&gt;Wiping the data/cache in Android's app settings will clear everything and
  will enable the coupons again. I.e., it is possible to use the same
  discount/offer as many times you wish.&lt;/li&gt;
&lt;li&gt;A rouge person can "use up" all coupons for any email (from a server point of view).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1&gt;The long version&lt;/h1&gt;
&lt;p&gt;Sibylla is a company who has been serving fast food for decades in Sweden. I'm
just back from &lt;a href="https://www.defcon.org/html/defcon-26/dc-26-index.html"&gt;DEF CON 26&lt;/a&gt; where I picked up a
&lt;a href="https://wifipineapple.com/nano"&gt;WiFi Pineapple Nano&lt;/a&gt;. When playing with the
pineapple I enabled the &lt;a href="https://www.wifipineapple.com/modules"&gt;DWall&lt;/a&gt; module,
which basically sniffs plain HTTP traffic (i.e., non-encrypted). As a side
effect of Google deciding to marking plain &lt;code&gt;HTTP&lt;/code&gt; as insecure in Google Chrome,
more and more sites have switched to use &lt;code&gt;HTTPS&lt;/code&gt; only, but there are still
plenty of un-encrypted traffic on the net. Out of curiosity I connected my
mobile to the WLAN shared by the pineapple and watched for traffic on DWall. I
tried a couple of different apps, some where dead silent and some showed some
&lt;code&gt;URLs&lt;/code&gt;, cookies and images. The Sibylla app seemed to communicate using plain
&lt;code&gt;HTTP&lt;/code&gt; and this is what can be seen when starting the app.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http://www.sibylla.se/ui/services/CampaignService.ashx?requestType&lt;span class="o"&gt;=&lt;/span&gt;getAllCoupons
http://www.sibylla.se/ui/services/CampaignService.ashx?requestType&lt;span class="o"&gt;=&lt;/span&gt;getAllCampaigns
http://www.sibylla.se/ui/services/CampaignService.ashx?requestType&lt;span class="o"&gt;=&lt;/span&gt;getAllCouponsForUser&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;userId&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;email_foo.bar@moo.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All calls here gets a &lt;a href="https://en.wikipedia.org/wiki/JSON"&gt;JSON&lt;/a&gt; encoded payload
in return, looking something like this.&lt;/p&gt;
&lt;p&gt;getAllCoupons query returns:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;pageId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1969&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;created&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2018-06-28 09:16&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;stoppublish&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2018-09-03 00:00&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Super Meal 2 för 99kr&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Super Meal 2 för 99kr&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;imageUrl&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://sibylla.se/PageFiles/6301/2_st_Super_Meal_99kr.png&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;pageId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1970&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;created&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2018-06-28 09:16&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;stoppublish&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2018-09-03 00:00&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;10kr rabatt mjukglass&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;10kr rabatt mjukglass&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;imageUrl&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://sibylla.se/PageFiles/6305/10kr_rabatt_mjukglass.png&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;...&lt;/span&gt; &lt;span class="err"&gt;and&lt;/span&gt; &lt;span class="err"&gt;so&lt;/span&gt; &lt;span class="err"&gt;on&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And the user specific query (getAllCouponsForUser) returns something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;pageId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1969&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;created&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2018-06-28 09:16&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;stoppublish&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2018-09-03 00:00&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Super Meal 2 för 99kr&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Super Meal 2 för 99kr&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;imageUrl&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://sibylla.se/PageFiles/6301/2_st_Super_Meal_99kr.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;consumed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;pageId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1970&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;created&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2018-06-28 09:16&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;stoppublish&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2018-09-03 00:00&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;10kr rabatt mjukglass&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;10kr rabatt mjukglass&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;imageUrl&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://sibylla.se/PageFiles/6305/10kr_rabatt_mjukglass.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;consumed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;...&lt;/span&gt; &lt;span class="err"&gt;and&lt;/span&gt; &lt;span class="err"&gt;so&lt;/span&gt; &lt;span class="err"&gt;on&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Basically the only difference is the &lt;code&gt;consumed&lt;/code&gt; attribute.&lt;/p&gt;
&lt;h1&gt;Coupons&lt;/h1&gt;
&lt;p&gt;In the app, Sibylla from time to time offer deals on various meals. They way it
works is that you go the "deals" in the app, where you are presented a couple of
different coupons. When you are buying corresponding meal you let the clerk
press the "use coupon" button and then you don't have to pay the full price,
simple and easy!&lt;/p&gt;
&lt;h1&gt;What happens under the hood?&lt;/h1&gt;
&lt;p&gt;When I played around with it and used up a coupon I could see the following
message was sent to &lt;a href="http://sibylla.se"&gt;sibylla.se&lt;/a&gt;: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http://www.sibylla.se/ui/services/CampaignService.ashx?requestType&lt;span class="o"&gt;=&lt;/span&gt;consumeCoupon&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;pageId&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1975&lt;/span&gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;userId&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;410daeeb1b350a86defb583e08ebbf15
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I.e., something is sent back to their servers indicating that a coupon has been
used and indeed when checking in the app it says that coupon already has been
used and it stays like that even if you kill / restart the app. Two things
caught my attention here.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;pageId&lt;/code&gt;: This is the id for the coupon. Replacing this any other valid
   &lt;code&gt;pageId&lt;/code&gt; from the query posted further up will mark the coupon as used in the
   Sibylla server for a certain user.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;userId&lt;/code&gt;: What is that? It looks like a hash of some sort. Is it a has of
   the &lt;code&gt;userId&lt;/code&gt; for the app? Or the hash of the email? Or something else?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I decompiled the apk-file (using zip,
&lt;a href="https://github.com/pxb1988/dex2jar"&gt;dex2jar&lt;/a&gt; and &lt;a href="http://jd.benow.ca"&gt;jd-gui&lt;/a&gt;)
and then looked up the keyword &lt;code&gt;consumeCoupon&lt;/code&gt;, which revealed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;UsedDealResponse&lt;/span&gt; &lt;span class="nf"&gt;loadDataFromNetwork&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Builder&lt;/span&gt; &lt;span class="n"&gt;campaignUriBuilder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Uri&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Constants&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;campaignService&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;buildUpon&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;campaignUriBuilder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;appendQueryParameter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;requestType&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;consumeCoupon&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;campaignUriBuilder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;appendQueryParameter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pageId&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pageId&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;campaignUriBuilder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;appendQueryParameter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;userId&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;userId&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;campaignUriBuilder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;m17i&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;URL &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UsedDealResponse&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;getRestTemplate&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getForObject&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UsedDealResponse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and where &lt;code&gt;userId&lt;/code&gt; seems to come from&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;UseDealsRequest&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;pageId&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UsedDealResponse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;userId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;md5&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;userId&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;m17i&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;MD5 &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;userId&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pageId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pageId&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There we have it, the &lt;code&gt;userId&lt;/code&gt; is a &lt;code&gt;MD5&lt;/code&gt; sum of something. After some fiddling
I understood that is comes from the string if you used email when logging into
the app. I guess it would be slightly different when using Facebook or Google
login.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    md5&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;email_foo.bar@moo.com&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 410daeeb1b350a86defb583e08ebbf15
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, let's recap:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The app queries the server on start.&lt;/li&gt;
&lt;li&gt;The app sends a &lt;code&gt;consumeCoupon&lt;/code&gt; message to the server when using a coupon,
  but instead of plain email it is using the &lt;code&gt;MD5&lt;/code&gt; of the string "&lt;code&gt;email_...&lt;/code&gt;" as
  the &lt;code&gt;userId&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1&gt;Re-use a coupon?&lt;/h1&gt;
&lt;p&gt;I wondered how they protected against using a coupon more than once. I searched
the decompiled code for other &lt;code&gt;requestType&lt;/code&gt;. But I couldn't find anything
indicating that it was possible to revert a used coupon (server side). But at
the same time, I've noticed that the app uses the email string when starting
the app, but using an &lt;code&gt;MD5&lt;/code&gt; sum of the app when using a coupon. Something
doesn't seem right here. Calling:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http://www.sibylla.se/ui/services/CampaignService.ashx?requestType&lt;span class="o"&gt;=&lt;/span&gt;getAllCouponsForUser&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;userId&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;email_foo.bar@moo.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http://www.sibylla.se/ui/services/CampaignService.ashx?requestType&lt;span class="o"&gt;=&lt;/span&gt;getAllCouponsForUser&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;userId&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;410daeeb1b350a86defb583e08ebbf15
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;gives different result. The former tells you that no coupon has been used, but
the latter will indeed tell you that the ones you've used up indeed are marked
as &lt;code&gt;consumed: true&lt;/code&gt;. So, how can the app know that a coupon has been used?
Could it be stored locally? Said and done, I cleared the Sibylla apps data and
cache. Restarted the app, logged in with the same email and voilá, the app
tells me that the coupon hasn't been used. This must mean that the app is
indeed storing data locally.&lt;/p&gt;
&lt;h1&gt;Reflections&lt;/h1&gt;
&lt;p&gt;I guess a company like Sibylla probably doesn't care too much about this. Since
in the end they're probably happy as long as they sell their fast food and they
probably makes a nice profit even when their customers are using a discount
code or something similar. But, since they walked the extra mile of letting
someone create an app like this, I guess there is some interest of having e
genuine app behaving as expected. There are mainly three things that seems
wrong here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The app stores data at a server, but the app doesn't seem to make use of this
  information. I cannot say whether that is a bug due to using a plain string
  when starting the app and using the &lt;code&gt;MD5&lt;/code&gt; of the string when using a coupon or
  if all this is intentional and the server part is just there for statistics for
  Sibylla marketing.&lt;/li&gt;
&lt;li&gt;It is possible to re-use coupons by just clear the data/cache for the app.&lt;/li&gt;
&lt;li&gt;Since there is no authentication, it is possible to exploit and put false
  information at their server, by just use any combination with &lt;code&gt;userId/pageId&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1&gt;What could and should be done?&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;The app should use &lt;code&gt;HTTPS&lt;/code&gt; instead of plain &lt;code&gt;HTTP&lt;/code&gt;. If that would have been
  the case, then this would never caught my attention.&lt;/li&gt;
&lt;li&gt;The email used then logging into the app should be authenticated.&lt;/li&gt;
&lt;li&gt;The server should only accept requests from authenticated users.&lt;/li&gt;
&lt;li&gt;The app should use the data from the server to decide whether a user already
  has used a coupon or not.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This doesn't seem like a super serious issue, but I've given Sibylla knowledge
about it 2018-08-19 and as common practice I'll give them a 90 days to fix the
issues I've found. I.e., somewhere after the 17th November 2018 I'll publish
this article on my site.&lt;/p&gt;</content></entry><entry><title>Timing Attack - Proof of Concept</title><link href="https://jyx.github.io/blog/2014/02/02/timing-attack-proof-of-concept/" rel="alternate"></link><published>2014-02-02T10:38:37+01:00</published><updated>2018-08-18T00:00:00+02:00</updated><author><name>Joakim Bech</name></author><id>tag:jyx.github.io,2014-02-02:/blog/2014/02/02/timing-attack-proof-of-concept/</id><summary type="html">&lt;p&gt;You might have heard about timing attacks, but either thought it sounded
too complicated to understand or that it is too complicated to actually do such
an attack. In this post I'm going to give a brief overview of a timing attack
and also provide some example code that you can play with on your own. Hopefully
after reading this post you will understand that you cannot neglect this if you
are creating a system where security is needed.&lt;/p&gt;
&lt;h1&gt;What …&lt;/h1&gt;</summary><content type="html">&lt;p&gt;You might have heard about timing attacks, but either thought it sounded
too complicated to understand or that it is too complicated to actually do such
an attack. In this post I'm going to give a brief overview of a timing attack
and also provide some example code that you can play with on your own. Hopefully
after reading this post you will understand that you cannot neglect this if you
are creating a system where security is needed.&lt;/p&gt;
&lt;h1&gt;What is a timing attack&lt;/h1&gt;
&lt;p&gt;A &lt;a href="http://en.wikipedia.org/wiki/Timing_attack"&gt;timing attack&lt;/a&gt; is a so called
&lt;a href="http://en.wikipedia.org/wiki/Side_channel_attack"&gt;side channel attack&lt;/a&gt;
where you analyze the timing information on a system is such a way that it
allows to break the protection of the system or a program running on it.&lt;/p&gt;
&lt;h1&gt;How is a timing attack performed?&lt;/h1&gt;
&lt;p&gt;Typically you need to measure the amount of time needed to do operations of some
kind. You can do this in several ways, for example you could hook up a set of
probes on a chip or a PCB and watch the result on an oscilloscope or a logical
analyzer. Another option is to simply leverage features from the
CPU/architecture itself. On a normal PC running Intel (or AMD) you can use the
time stamp counter &lt;a href="http://en.wikipedia.org/wiki/Time_Stamp_Counter"&gt;rdtsc&lt;/a&gt;
or a High Precision Event Timer
&lt;a href="http://en.wikipedia.org/wiki/High_Precision_Event_Timer"&gt;hpet&lt;/a&gt;. Be aware that
the time stamp counter isn't reliable any longer, since process speeds can
change (due to power management), you have context switches etc. But just for
testing it can be good enough.&lt;/p&gt;
&lt;p&gt;So you have found a way of taking time measures, what next? The easy answer is,
start measure the execution time of sensitive functions. For example when
calling functions that verifies password, functions that does encryption and
such. Measuring the time needed for &lt;code&gt;strcmp&lt;/code&gt; as exemplified in the proof of
concept code below is easy. It becomes more complicated if you want to do the
same when doing
&lt;a href="http://en.wikipedia.org/wiki/Advanced_Encryption_Standard#Side-channel_attacks"&gt;AES&lt;/a&gt;
encryption for example. It is still doable, but you also need to know the
algorithm to know where to look and how to interpret the leaked information.&lt;/p&gt;
&lt;h1&gt;Countermeasures&lt;/h1&gt;
&lt;p&gt;Main idea is that you need balance the string compare functions so that it
always takes the same amount of time to perform.&lt;/p&gt;
&lt;h1&gt;Proof of concept&lt;/h1&gt;
&lt;p&gt;I have put together a small proof of concept / testing program to show that it
is actually not that complicated to do a timing attack. It is unlikely that it
is as easy as this, but still, it gives the idea and shows that you can
actually use timing to guess password, guesses that are fairly good. The main
idea is to show how execution time actually varies when doing string
comparison. The by using this information leakage we show that we can guess
pretty good what we believe the correct character is in the correct
password/string.&lt;/p&gt;
&lt;h1&gt;The algorithm&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Loop over all characters, one by one in the string that we want to check
   (&lt;code&gt;thisisalongstring&lt;/code&gt; in this case).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For every character in the string, do an inner loop, where you are looping
   from &lt;code&gt;'a'&lt;/code&gt; to &lt;code&gt;'z'&lt;/code&gt;. For every call to the string comparison function record
   the amount of time it took. The letter that had longest execution time is
   most likely the correct character. Hence save that character in the in the
   array that contains guessed character.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lastly compare the correct string with guessed string to see if we got all
   timing based guesses correct or not.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;p&gt;Here are the test result of a test run with debug information enabled&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ make &lt;span class="nv"&gt;DEBUG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
$ ./main &lt;span class="m"&gt;10&lt;/span&gt;
Shows a couple of examples of the &lt;span class="nb"&gt;time&lt;/span&gt; it takes to make string comparison
avg &lt;span class="nb"&gt;time&lt;/span&gt; long string &lt;span class="o"&gt;(&lt;/span&gt;thisisalongstring&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;821&lt;/span&gt;
avg &lt;span class="nb"&gt;time&lt;/span&gt; short string &lt;span class="o"&gt;(&lt;/span&gt;foo&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;532&lt;/span&gt;
avg &lt;span class="nb"&gt;time&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; char correct &lt;span class="o"&gt;(&lt;/span&gt;XXX/foo&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;486&lt;/span&gt;
avg &lt;span class="nb"&gt;time&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; char correct &lt;span class="o"&gt;(&lt;/span&gt;fXX/foo&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;495&lt;/span&gt;
avg &lt;span class="nb"&gt;time&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; char correct &lt;span class="o"&gt;(&lt;/span&gt;foX/foo&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;540&lt;/span&gt;
avg &lt;span class="nb"&gt;time&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt; char correct &lt;span class="o"&gt;(&lt;/span&gt;foo/foo&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;561&lt;/span&gt;
Guessed that pw should be: thisisalongshring
Guessed that pw should be: thisisalongstring
Guessed that pw should be: thisisalongstring
Guessed that pw should be: thhbisalongstring
Guessed that pw should be: thisisalongstring
Guessed that pw should be: thisisalongstring
Guessed that pw should be: thisisalongstring
Guessed that pw should be: thisisalongstring
Guessed that pw should be: thisimalongstrimf
Guessed that pw should be: thisisalongstrhng
&lt;span class="m"&gt;6&lt;/span&gt; successful timing attacks
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The figures will vary, but they are almost always in the same region. Looking
at:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Line 3&lt;/strong&gt;: we can see that it takes &lt;code&gt;821&lt;/code&gt; time units for a full and correct string
compare of the string &lt;code&gt;thisisalongstring&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Line 4&lt;/strong&gt;: we can see that it takes &lt;code&gt;532&lt;/code&gt; time units to correctly match the
string &lt;code&gt;foo&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Line 5-8&lt;/strong&gt;: for every test run, we add a correct matching character and as
expected we can see that the time increases for every correct character. This
is because the string compare function as said before has a timing linear to
the correct number of characters.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Line 9-19&lt;/strong&gt;: shows the result when trying to guess the string
&lt;code&gt;thisisalongstring&lt;/code&gt; based on the time it takes to guess &lt;code&gt;'a'&lt;/code&gt;, &lt;code&gt;'b'&lt;/code&gt;, &lt;code&gt;'c'&lt;/code&gt;,
... &lt;code&gt;'z'&lt;/code&gt;, for every character. This particular run we guessed correct 6 out or
10 times. Not that bad, it takes roughly 0.002 seconds to run everything above.
According to Steve Gibson's &lt;a href="https://www.grc.com/haystack.htm"&gt;Password Haystack&lt;/a&gt;
page, it takes approximately 3.75 centuries to brute force that password
&lt;strong&gt;once&lt;/strong&gt; using a what he calls a "massive cracking array scenario (assuming one
hundred trillion guesses per second)".&lt;/p&gt;
&lt;h1&gt;A couple of interesting things I've noticed&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;If I increase the &lt;code&gt;TEST_LOOPS&lt;/code&gt; define I actually get much worse result?&lt;/li&gt;
&lt;li&gt;If I turn on all optimizations, i.e. &lt;code&gt;-O3&lt;/code&gt;, it doesn't work at all.&lt;/li&gt;
&lt;li&gt;The last character was always incorrectly guessed and that is the reason why
  I've added a space at the end of the string '&lt;code&gt;thisisalongstring&lt;/code&gt;', which I
  later on strip away. I believe the reason for this problem is inaccuracy
  using &lt;code&gt;rdtsc&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If any reader of this post knows the answer to my reflections above, please
leave a comment.&lt;/p&gt;
&lt;h1&gt;Source code&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/downloads/timing/time_attack_strcmp.c"&gt;time_attack_strcmp.c&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/downloads/timing/Makefile"&gt;Makefile&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content></entry></feed>